const $globalThis = (
  typeof globalThis !== 'undefined' ? globalThis :
  typeof global !== 'undefined' ? global :
  typeof window !== 'undefined' ? window : self
);
exports.globalThis = $globalThis;

const AggregateError = $globalThis.AggregateError;
exports.AggregateError = AggregateError;
const Array = $globalThis.Array;
exports.Array = Array;
const ArrayBuffer = $globalThis.ArrayBuffer;
exports.ArrayBuffer = ArrayBuffer;
const Atomics = $globalThis.Atomics;
exports.Atomics = Atomics;
const BigInt = $globalThis.BigInt;
exports.BigInt = BigInt;
const BigInt64Array = $globalThis.BigInt64Array;
exports.BigInt64Array = BigInt64Array;
const BigUint64Array = $globalThis.BigUint64Array;
exports.BigUint64Array = BigUint64Array;
const Boolean = $globalThis.Boolean;
exports.Boolean = Boolean;
const DataView = $globalThis.DataView;
exports.DataView = DataView;
const Date = $globalThis.Date;
exports.Date = Date;
const Error = $globalThis.Error;
exports.Error = Error;
const EvalError = $globalThis.EvalError;
exports.EvalError = EvalError;
const FinalizationRegistry = $globalThis.FinalizationRegistry;
exports.FinalizationRegistry = FinalizationRegistry;
const Float32Array = $globalThis.Float32Array;
exports.Float32Array = Float32Array;
const Float64Array = $globalThis.Float64Array;
exports.Float64Array = Float64Array;
const Function = $globalThis.Function;
exports.Function = Function;
const Int8Array = $globalThis.Int8Array;
exports.Int8Array = Int8Array;
const Int16Array = $globalThis.Int16Array;
exports.Int16Array = Int16Array;
const Int32Array = $globalThis.Int32Array;
exports.Int32Array = Int32Array;
const JSON = $globalThis.JSON;
exports.JSON = JSON;
const Map = $globalThis.Map;
exports.Map = Map;
const Math = $globalThis.Math;
exports.Math = Math;
const Number = $globalThis.Number;
exports.Number = Number;
const Object = $globalThis.Object;
exports.Object = Object;
const Promise = $globalThis.Promise;
exports.Promise = Promise;
const Proxy = $globalThis.Proxy;
exports.Proxy = Proxy;
const RangeError = $globalThis.RangeError;
exports.RangeError = RangeError;
const ReferenceError = $globalThis.ReferenceError;
exports.ReferenceError = ReferenceError;
const Reflect = $globalThis.Reflect;
exports.Reflect = Reflect;
const RegExp = $globalThis.RegExp;
exports.RegExp = RegExp;
const Set = $globalThis.Set;
exports.Set = Set;
const SharedArrayBuffer = $globalThis.SharedArrayBuffer;
exports.SharedArrayBuffer = SharedArrayBuffer;
const String = $globalThis.String;
exports.String = String;
const Symbol = $globalThis.Symbol;
exports.Symbol = Symbol;
const SyntaxError = $globalThis.SyntaxError;
exports.SyntaxError = SyntaxError
const TypeError = $globalThis.TypeError;
exports.TypeError = TypeError;
const Uint8Array = $globalThis.Uint8Array;
exports.Uint8Array = Uint8Array;
const Uint8ClampedArray = $globalThis.Uint8ClampedArray;
exports.Uint8ClampedArray = Uint8ClampedArray;
const Uint16Array = $globalThis.Uint16Array;
exports.Uint16Array = Uint16Array;
const Uint32Array = $globalThis.Uint32Array;
exports.Uint32Array = Uint32Array;
const URIError = $globalThis.URIError;
exports.URIError = URIError;
const WeakMap = $globalThis.WeakMap;
exports.WeakMap = WeakMap;
const WeakRef = $globalThis.WeakRef;
exports.WeakRef = WeakRef;
const WeakSet = $globalThis.WeakSet;
exports.WeakSet = WeakSet;

const decodeURI = $globalThis.decodeURI;
exports.decodeURI = decodeURI;
const decodeURIComponent = $globalThis.decodeURIComponent;
exports.decodeURIComponent = decodeURIComponent;
const encodeURI = $globalThis.encodeURI;
exports.encodeURI = encodeURI;
const encodeURIComponent = $globalThis.encodeURIComponent;
exports.encodeURIComponent = encodeURIComponent;
const $eval = $globalThis.eval;
exports.eval = $eval;
const isFinite = $globalThis.isFinite;
exports.isFinite = isFinite;
const isNaN = $globalThis.isNaN;
exports.isNaN = isNaN;
const parseFloat = $globalThis.parseFloat;
exports.parseFloat = parseFloat;
const parseInt = $globalThis.parseInt;
exports.parseInt = parseInt;

const AggregateErrorPrototype = AggregateError ? AggregateError.prototype : undefined;
exports.AggregateErrorPrototype = AggregateErrorPrototype;

const ArrayFrom = Array.from;
exports.ArrayFrom = ArrayFrom;
const ArrayIsArray = Array.isArray;
exports.ArrayIsArray = ArrayIsArray;
const ArrayOf = Array.of;
exports.ArrayOf = ArrayOf;
const ArrayPrototype = Array.prototype;
exports.ArrayPrototype = ArrayPrototype;
const ArrayPrototypeAt = ArrayPrototype.at;
exports.ArrayPrototypeAt = ArrayPrototypeAt;
const ArrayPrototypeConcat = ArrayPrototype.concat;
exports.ArrayPrototypeConcat = ArrayPrototypeConcat;
const ArrayPrototypeCopyWithin = ArrayPrototype.copyWithin;
exports.ArrayPrototypeCopyWithin = ArrayPrototypeCopyWithin;
const ArrayPrototypeEntries = ArrayPrototype.entries;
exports.ArrayPrototypeEntries = ArrayPrototypeEntries;
const ArrayPrototypeEvery = ArrayPrototype.every;
exports.ArrayPrototypeEvery = ArrayPrototypeEvery;
const ArrayPrototypeFill = ArrayPrototype.fill;
exports.ArrayPrototypeFill = ArrayPrototypeFill;
const ArrayPrototypeFilter = ArrayPrototype.filter;
exports.ArrayPrototypeFilter = ArrayPrototypeFilter;
const ArrayPrototypeFind = ArrayPrototype.find;
exports.ArrayPrototypeFind = ArrayPrototypeFind;
const ArrayPrototypeFindIndex = ArrayPrototype.findIndex;
exports.ArrayPrototypeFindIndex = ArrayPrototypeFindIndex;
const ArrayPrototypeFlat = ArrayPrototype.flat;
exports.ArrayPrototypeFlat = ArrayPrototypeFlat;
const ArrayPrototypeFlatMap = ArrayPrototype.flatMap;
exports.ArrayPrototypeFlatMap = ArrayPrototypeFlatMap;
const ArrayPrototypeForEach = ArrayPrototype.forEach;
exports.ArrayPrototypeForEach = ArrayPrototypeForEach;
const ArrayPrototypeIncludes = ArrayPrototype.includes;
exports.ArrayPrototypeIncludes = ArrayPrototypeIncludes;
const ArrayPrototypeIndexOf = ArrayPrototype.indexOf;
exports.ArrayPrototypeIndexOf = ArrayPrototypeIndexOf;
const ArrayPrototypeJoin = ArrayPrototype.join;
exports.ArrayPrototypeJoin = ArrayPrototypeJoin;
const ArrayPrototypeKeys = ArrayPrototype.keys;
exports.ArrayPrototypeKeys = ArrayPrototypeKeys;
const ArrayPrototypeLastIndexOf = ArrayPrototype.lastIndexOf;
exports.ArrayPrototypeLastIndexOf = ArrayPrototypeLastIndexOf;
const ArrayPrototypeMap = ArrayPrototype.map;
exports.ArrayPrototypeMap = ArrayPrototypeMap;
const ArrayPrototypePop = ArrayPrototype.pop;
exports.ArrayPrototypePop = ArrayPrototypePop;
const ArrayPrototypePush = ArrayPrototype.push;
exports.ArrayPrototypePush = ArrayPrototypePush;
const ArrayPrototypeReduce = ArrayPrototype.reduce;
exports.ArrayPrototypeReduce = ArrayPrototypeReduce;
const ArrayPrototypeReduceRight = ArrayPrototype.reduceRight;
exports.ArrayPrototypeReduceRight = ArrayPrototypeReduceRight;
const ArrayPrototypeReverse = ArrayPrototype.reverse;
exports.ArrayPrototypeReverse = ArrayPrototypeReverse;
const ArrayPrototypeShift = ArrayPrototype.shift;
exports.ArrayPrototypeShift = ArrayPrototypeShift;
const ArrayPrototypeSlice = ArrayPrototype.slice;
exports.ArrayPrototypeSlice = ArrayPrototypeSlice;
const ArrayPrototypeSome = ArrayPrototype.some;
exports.ArrayPrototypeSome = ArrayPrototypeSome;
const ArrayPrototypeSort = ArrayPrototype.sort;
exports.ArrayPrototypeSort = ArrayPrototypeSort;
const ArrayPrototypeSplice = ArrayPrototype.splice;
exports.ArrayPrototypeSplice = ArrayPrototypeSplice;
const ArrayPrototypeToLocaleString = ArrayPrototype.toLocaleString;
exports.ArrayPrototypeToLocaleString = ArrayPrototypeToLocaleString;
const ArrayPrototypeToString = ArrayPrototype.toString;
exports.ArrayPrototypeToString = ArrayPrototypeToString;
const ArrayPrototypeUnshift = ArrayPrototype.unshift;
exports.ArrayPrototypeUnshift = ArrayPrototypeUnshift;
const ArrayPrototypeValues = ArrayPrototype.values;
exports.ArrayPrototypeValues = ArrayPrototypeValues;
const ArrayPrototypeSymbolIterator = ArrayPrototypeValues;
exports.ArrayPrototypeSymbolIterator = ArrayPrototypeSymbolIterator;

const ArrayBufferIsView = ArrayBuffer.isView;
exports.ArrayBufferIsView = ArrayBufferIsView;
const ArrayBufferPrototype = ArrayBuffer.prototype;
exports.ArrayBufferPrototype = ArrayBufferPrototype;
const ArrayBufferPrototypeSlice = ArrayBufferPrototype.slice;
exports.ArrayBufferPrototypeSlice = ArrayBufferPrototypeSlice;

const AtomicsAdd = Atomics ? Atomics.add : undefined;
exports.AtomicsAdd = AtomicsAdd;
const AtomicsAnd = Atomics ? Atomics.and : undefined;
exports.AtomicsAnd = AtomicsAnd;
const AtomicsCompareExchange = Atomics ? Atomics.compareExchange : undefined;
exports.AtomicsCompareExchange = AtomicsCompareExchange;
const AtomicsExchange = Atomics ? Atomics.exchange : undefined;
exports.AtomicsExchange = AtomicsExchange;
const AtomicsIsLockFree = Atomics ? Atomics.isLockFree : undefined;
exports.AtomicsIsLockFree = AtomicsIsLockFree;
const AtomicsLoad = Atomics ? Atomics.load : undefined;
exports.AtomicsLoad = AtomicsLoad;
const AtomicsOr = Atomics ? Atomics.or : undefined;
exports.AtomicsOr = AtomicsOr;
const AtomicsStore = Atomics ? Atomics.store : undefined;
exports.AtomicsStore = AtomicsStore;
const AtomicsSub = Atomics ? Atomics.sub : undefined;
exports.AtomicsSub = AtomicsSub;
const AtomicsWait = Atomics ? Atomics.wait : undefined;
exports.AtomicsWait = AtomicsWait;
const AtomicsNotify = Atomics ? Atomics.notify : undefined;
exports.AtomicsNotify = AtomicsNotify;
const AtomicsXor = Atomics ? Atomics.xor : undefined;
exports.AtomicsXor = AtomicsXor;

const BigIntAsIntN = BigInt ? BigInt.asIntN : undefined;
exports.BigIntAsIntN = BigIntAsIntN;
const BigIntAsUintN = BigInt ? BigInt.asUintN : undefined;
exports.BigIntAsUintN = BigIntAsUintN;
const BigIntPrototype = BigInt ? BigInt.prototype : undefined;
exports.BigIntPrototype = BigIntPrototype;
const BigIntPrototypeToLocaleString = BigIntPrototype ? BigIntPrototype.toLocaleString : undefined;
exports.BigIntPrototypeToLocaleString = BigIntPrototypeToLocaleString;
const BigIntPrototypeToString = BigIntPrototype ? BigIntPrototype.toString : undefined;
exports.BigIntPrototypeToString = BigIntPrototypeToString;
const BigIntPrototypeValueOf = BigIntPrototype ? BigIntPrototype.valueOf : undefined;
exports.BigIntPrototypeValueOf = BigIntPrototypeValueOf;

const BigInt64ArrayBYTES_PER_ELEMENT = BigInt64Array ? BigInt64Array.BYTES_PER_ELEMENT : undefined;
exports.BigInt64ArrayBYTES_PER_ELEMENT = BigInt64ArrayBYTES_PER_ELEMENT;
const BigInt64ArrayPrototype = BigInt64Array ? BigInt64Array.prototype : undefined;
exports.BigInt64ArrayPrototype = BigInt64ArrayPrototype;

const BigUint64ArrayBYTES_PER_ELEMENT = BigUint64Array ? BigUint64Array.BYTES_PER_ELEMENT : undefined;
exports.BigUint64ArrayBYTES_PER_ELEMENT = BigUint64ArrayBYTES_PER_ELEMENT;
const BigUint64ArrayPrototype = BigUint64Array ? BigUint64Array.prototype : undefined;
exports.BigUint64ArrayPrototype = BigUint64ArrayPrototype;

const BooleanPrototype = Boolean.prototype;
exports.BooleanPrototype = BooleanPrototype;
const BooleanPrototypeToString = BooleanPrototype.toString;
exports.BooleanPrototypeToString = BooleanPrototypeToString;
const BooleanPrototypeValueOf = BooleanPrototype.valueOf;
exports.BooleanPrototypeValueOf = BooleanPrototypeValueOf;

const DataViewPrototype = DataView.prototype;
exports.DataViewPrototype = DataViewPrototype;
const DataViewPrototypeGetBigInt64 = DataViewPrototype.getBigInt64;
exports.DataViewPrototypeGetBigInt64 = DataViewPrototypeGetBigInt64;
const DataViewPrototypeGetBigUint64 = DataViewPrototype.getBigUint64;
exports.DataViewPrototypeGetBigUint64 = DataViewPrototypeGetBigUint64;
const DataViewPrototypeGetFloat32 = DataViewPrototype.getFloat32;
exports.DataViewPrototypeGetFloat32 = DataViewPrototypeGetFloat32;
const DataViewPrototypeGetFloat64 = DataViewPrototype.getFloat64;
exports.DataViewPrototypeGetFloat64 = DataViewPrototypeGetFloat64;
const DataViewPrototypeGetInt8 = DataViewPrototype.getInt8;
exports.DataViewPrototypeGetInt8 = DataViewPrototypeGetInt8;
const DataViewPrototypeGetInt16 = DataViewPrototype.getInt16;
exports.DataViewPrototypeGetInt16 = DataViewPrototypeGetInt16;
const DataViewPrototypeGetInt32 = DataViewPrototype.getInt32;
exports.DataViewPrototypeGetInt32 = DataViewPrototypeGetInt32;
const DataViewPrototypeGetUint8 = DataViewPrototype.getUint8;
exports.DataViewPrototypeGetUint8 = DataViewPrototypeGetUint8;
const DataViewPrototypeGetUint16 = DataViewPrototype.getUint16;
exports.DataViewPrototypeGetUint16 = DataViewPrototypeGetUint16;
const DataViewPrototypeGetUint32 = DataViewPrototype.getUint32;
exports.DataViewPrototypeGetUint32 = DataViewPrototypeGetUint32;
const DataViewPrototypeSetBigInt64 = DataViewPrototype.setBigInt64;
exports.DataViewPrototypeSetBigInt64 = DataViewPrototypeSetBigInt64;
const DataViewPrototypeSetBigUint64 = DataViewPrototype.setBigUint64;
exports.DataViewPrototypeSetBigUint64 = DataViewPrototypeSetBigUint64;
const DataViewPrototypeSetFloat32 = DataViewPrototype.setFloat32;
exports.DataViewPrototypeSetFloat32 = DataViewPrototypeSetFloat32;
const DataViewPrototypeSetFloat64 = DataViewPrototype.setFloat64;
exports.DataViewPrototypeSetFloat64 = DataViewPrototypeSetFloat64;
const DataViewPrototypeSetInt8 = DataViewPrototype.setInt8;
exports.DataViewPrototypeSetInt8 = DataViewPrototypeSetInt8;
const DataViewPrototypeSetInt16 = DataViewPrototype.setInt16;
exports.DataViewPrototypeSetInt16 = DataViewPrototypeSetInt16;
const DataViewPrototypeSetInt32 = DataViewPrototype.setInt32;
exports.DataViewPrototypeSetInt32 = DataViewPrototypeSetInt32;
const DataViewPrototypeSetUint8 = DataViewPrototype.setUint8;
exports.DataViewPrototypeSetUint8 = DataViewPrototypeSetUint8;
const DataViewPrototypeSetUint16 = DataViewPrototype.setUint16;
exports.DataViewPrototypeSetUint16 = DataViewPrototypeSetUint16;
const DataViewPrototypeSetUint32 = DataViewPrototype.setUint32;
exports.DataViewPrototypeSetUint32 = DataViewPrototypeSetUint32;

const DateNow = Date.now;
exports.DateNow = DateNow;
const DateParse = Date.parse;
exports.DateParse = DateParse;
const DatePrototype = Date.prototype;
exports.DatePrototype = DatePrototype;
const DateUTC = Date.UTC;
exports.DateUTC = DateUTC;
const DatePrototypeGetDate = DatePrototype.getDate;
exports.DatePrototypeGetDate = DatePrototypeGetDate;
const DatePrototypeGetDay = DatePrototype.getDay;
exports.DatePrototypeGetDay = DatePrototypeGetDay;
const DatePrototypeGetFullYear = DatePrototype.getFullYear;
exports.DatePrototypeGetFullYear = DatePrototypeGetFullYear;
const DatePrototypeGetHours = DatePrototype.getHours;
exports.DatePrototypeGetHours = DatePrototypeGetHours;
const DatePrototypeGetMilliseconds = DatePrototype.getMilliseconds;
exports.DatePrototypeGetMilliseconds = DatePrototypeGetMilliseconds;
const DatePrototypeGetMinutes = DatePrototype.getMinutes;
exports.DatePrototypeGetMinutes = DatePrototypeGetMinutes;
const DatePrototypeGetMonth = DatePrototype.getMonth;
exports.DatePrototypeGetMonth = DatePrototypeGetMonth;
const DatePrototypeGetSeconds = DatePrototype.getSeconds;
exports.DatePrototypeGetSeconds = DatePrototypeGetSeconds;
const DatePrototypeGetTime = DatePrototype.getTime;
exports.DatePrototypeGetTime = DatePrototypeGetTime;
const DatePrototypeGetTimezoneOffset = DatePrototype.getTimezoneOffset;
exports.DatePrototypeGetTimezoneOffset = DatePrototypeGetTimezoneOffset;
const DatePrototypeGetUTCDate = DatePrototype.getUTCDate;
exports.DatePrototypeGetUTCDate = DatePrototypeGetUTCDate;
const DatePrototypeGetUTCDay = DatePrototype.getUTCDay;
exports.DatePrototypeGetUTCDay = DatePrototypeGetUTCDay;
const DatePrototypeGetUTCFullYear = DatePrototype.getUTCFullYear;
exports.DatePrototypeGetUTCFullYear = DatePrototypeGetUTCFullYear;
const DatePrototypeGetUTCHours = DatePrototype.getUTCHours;
exports.DatePrototypeGetUTCHours = DatePrototypeGetUTCHours;
const DatePrototypeGetUTCMilliseconds = DatePrototype.getUTCMilliseconds;
exports.DatePrototypeGetUTCMilliseconds = DatePrototypeGetUTCMilliseconds;
const DatePrototypeGetUTCMinutes = DatePrototype.getUTCMinutes;
exports.DatePrototypeGetUTCMinutes = DatePrototypeGetUTCMinutes;
const DatePrototypeGetUTCMonth = DatePrototype.getUTCMonth;
exports.DatePrototypeGetUTCMonth = DatePrototypeGetUTCMonth;
const DatePrototypeGetUTCSeconds = DatePrototype.getUTCSeconds;
exports.DatePrototypeGetUTCSeconds = DatePrototypeGetUTCSeconds;
const DatePrototypeSetDate = DatePrototype.setDate;
exports.DatePrototypeSetDate = DatePrototypeSetDate;
const DatePrototypeSetFullYear = DatePrototype.setFullYear;
exports.DatePrototypeSetFullYear = DatePrototypeSetFullYear;
const DatePrototypeSetHours = DatePrototype.setHours;
exports.DatePrototypeSetHours = DatePrototypeSetHours;
const DatePrototypeSetMilliseconds = DatePrototype.setMilliseconds;
exports.DatePrototypeSetMilliseconds = DatePrototypeSetMilliseconds;
const DatePrototypeSetMinutes = DatePrototype.setMinutes;
exports.DatePrototypeSetMinutes = DatePrototypeSetMinutes;
const DatePrototypeSetMonth = DatePrototype.setMonth;
exports.DatePrototypeSetMonth = DatePrototypeSetMonth;
const DatePrototypeSetSeconds = DatePrototype.setSeconds;
exports.DatePrototypeSetSeconds = DatePrototypeSetSeconds;
const DatePrototypeSetTime = DatePrototype.setTime;
exports.DatePrototypeSetTime = DatePrototypeSetTime;
const DatePrototypeSetUTCDate = DatePrototype.setUTCDate;
exports.DatePrototypeSetUTCDate = DatePrototypeSetUTCDate;
const DatePrototypeSetUTCFullYear = DatePrototype.setUTCFullYear;
exports.DatePrototypeSetUTCFullYear = DatePrototypeSetUTCFullYear;
const DatePrototypeSetUTCHours = DatePrototype.setUTCHours;
exports.DatePrototypeSetUTCHours = DatePrototypeSetUTCHours;
const DatePrototypeSetUTCMilliseconds = DatePrototype.setUTCMilliseconds;
exports.DatePrototypeSetUTCMilliseconds = DatePrototypeSetUTCMilliseconds;
const DatePrototypeSetUTCMinutes = DatePrototype.setUTCMinutes;
exports.DatePrototypeSetUTCMinutes = DatePrototypeSetUTCMinutes;
const DatePrototypeSetUTCMonth = DatePrototype.setUTCMonth;
exports.DatePrototypeSetUTCMonth = DatePrototypeSetUTCMonth;
const DatePrototypeSetUTCSeconds = DatePrototype.setUTCSeconds;
exports.DatePrototypeSetUTCSeconds = DatePrototypeSetUTCSeconds;
const DatePrototypeToDateString = DatePrototype.toDateString;
exports.DatePrototypeToDateString = DatePrototypeToDateString;
const DatePrototypeToISOString = DatePrototype.toISOString;
exports.DatePrototypeToISOString = DatePrototypeToISOString;
const DatePrototypeToJSON = DatePrototype.toJSON;
exports.DatePrototypeToJSON = DatePrototypeToJSON;
const DatePrototypeToLocaleDateString = DatePrototype.toLocaleDateString;
exports.DatePrototypeToLocaleDateString = DatePrototypeToLocaleDateString;
const DatePrototypeToLocaleString = DatePrototype.toLocaleString;
exports.DatePrototypeToLocaleString = DatePrototypeToLocaleString;
const DatePrototypeToLocaleTimeString = DatePrototype.toLocaleTimeString;
exports.DatePrototypeToLocaleTimeString = DatePrototypeToLocaleTimeString;
const DatePrototypeToString = DatePrototype.toString;
exports.DatePrototypeToString = DatePrototypeToString;
const DatePrototypeToTimeString = DatePrototype.toTimeString;
exports.DatePrototypeToTimeString = DatePrototypeToTimeString;
const DatePrototypeToUTCString = DatePrototype.toUTCString;
exports.DatePrototypeToUTCString = DatePrototypeToUTCString;
const DatePrototypeValueOf = DatePrototype.valueOf;
exports.DatePrototypeValueOf = DatePrototypeValueOf;

const ErrorPrototype = Error.prototype;
exports.ErrorPrototype = ErrorPrototype;
const ErrorPrototypeToString = ErrorPrototype.toString;
exports.ErrorPrototypeToString = ErrorPrototypeToString;

const EvalErrorPrototype = EvalError.prototype;
exports.EvalErrorPrototype = EvalErrorPrototype;

const FinalizationRegistryPrototype = FinalizationRegistry ? FinalizationRegistry.prototype : undefined;
exports.FinalizationRegistryPrototype = FinalizationRegistryPrototype;
const FinalizationRegistryPrototypeRegister = FinalizationRegistryPrototype ? FinalizationRegistryPrototype.register : undefined;
exports.FinalizationRegistryPrototypeRegister = FinalizationRegistryPrototypeRegister;
const FinalizationRegistryPrototypeUnregister = FinalizationRegistryPrototype ? FinalizationRegistryPrototype.unregister : undefined;
exports.FinalizationRegistryPrototypeUnregister = FinalizationRegistryPrototypeUnregister;

const Float32ArrayBYTES_PER_ELEMENT = Float32Array.BYTES_PER_ELEMENT;
exports.Float32ArrayBYTES_PER_ELEMENT = Float32ArrayBYTES_PER_ELEMENT;
const Float32ArrayPrototype = Float32Array.prototype;
exports.Float32ArrayPrototype = Float32ArrayPrototype;

const Float64ArrayBYTES_PER_ELEMENT = Float64Array.BYTES_PER_ELEMENT;
exports.Float64ArrayBYTES_PER_ELEMENT = Float64ArrayBYTES_PER_ELEMENT;
const Float64ArrayPrototype = Float64Array.prototype;
exports.Float64ArrayPrototype = Float64ArrayPrototype;

const FunctionPrototype = Function.prototype;
exports.FunctionPrototype = FunctionPrototype;
const FunctionPrototypeApply = FunctionPrototype.apply;
exports.FunctionPrototypeApply = FunctionPrototypeApply;
const FunctionPrototypeBind = FunctionPrototype.bind;
exports.FunctionPrototypeBind = FunctionPrototypeBind;
const FunctionPrototypeCall = FunctionPrototype.call;
exports.FunctionPrototypeCall = FunctionPrototypeCall;
const FunctionPrototypeToString = FunctionPrototype.toString;
exports.FunctionPrototypeToString = FunctionPrototypeToString;

const Int8ArrayBYTES_PER_ELEMENT = Int8Array.BYTES_PER_ELEMENT;
exports.Int8ArrayBYTES_PER_ELEMENT = Int8ArrayBYTES_PER_ELEMENT;
const Int8ArrayPrototype = Int8Array.prototype;
exports.Int8ArrayPrototype = Int8ArrayPrototype;

const Int16ArrayBYTES_PER_ELEMENT = Int16Array.BYTES_PER_ELEMENT;
exports.Int16ArrayBYTES_PER_ELEMENT = Int16ArrayBYTES_PER_ELEMENT;
const Int16ArrayPrototype = Int16Array.prototype;
exports.Int16ArrayPrototype = Int16ArrayPrototype;

const Int32ArrayBYTES_PER_ELEMENT = Int32Array.BYTES_PER_ELEMENT;
exports.Int32ArrayBYTES_PER_ELEMENT = Int32ArrayBYTES_PER_ELEMENT;
const Int32ArrayPrototype = Int32Array.prototype;
exports.Int32ArrayPrototype = Int32ArrayPrototype;

const JSONParse = JSON.parse;
exports.JSONParse = JSONParse;
const JSONStringify = JSON.stringify;
exports.JSONStringify = JSONStringify;

const MapPrototype = Map.prototype;
exports.MapPrototype = MapPrototype;
const MapPrototypeClear = MapPrototype.clear;
exports.MapPrototypeClear = MapPrototypeClear;
const MapPrototypeDelete = MapPrototype.delete;
exports.MapPrototypeDelete = MapPrototypeDelete;
const MapPrototypeEntries = MapPrototype.entries;
exports.MapPrototypeEntries = MapPrototypeEntries;
const MapPrototypeForEach = MapPrototype.forEach;
exports.MapPrototypeForEach = MapPrototypeForEach;
const MapPrototypeGet = MapPrototype.get;
exports.MapPrototypeGet = MapPrototypeGet;
const MapPrototypeHas = MapPrototype.has;
exports.MapPrototypeHas = MapPrototypeHas;
const MapPrototypeKeys = MapPrototype.keys;
exports.MapPrototypeKeys = MapPrototypeKeys;
const MapPrototypeSet = MapPrototype.set;
exports.MapPrototypeSet = MapPrototypeSet;
const MapPrototypeValues = MapPrototype.values;
exports.MapPrototypeValues = MapPrototypeValues;
const MapPrototypeSymbolIterator = MapPrototypeEntries;
exports.MapPrototypeSymbolIterator = MapPrototypeSymbolIterator;

const MathE = Math.E;
exports.MathE = MathE;
const MathLN10 = Math.LN10;
exports.MathLN10 = MathLN10;
const MathLN2 = Math.LN2;
exports.MathLN2 = MathLN2;
const MathLOG10E = Math.LOG10E;
exports.MathLOG10E = MathLOG10E;
const MathLOG2E = Math.LOG2E;
exports.MathLOG2E = MathLOG2E;
const MathPI = Math.PI;
exports.MathPI = MathPI;
const MathSQRT1_2 = Math.SQRT1_2;
exports.MathSQRT1_2 = MathSQRT1_2;
const MathSQRT2 = Math.SQRT2;
exports.MathSQRT2 = MathSQRT2;
const MathAbs = Math.abs;
exports.MathAbs = MathAbs;
const MathAcos = Math.acos;
exports.MathAcos = MathAcos;
const MathAcosh = Math.acosh;
exports.MathAcosh = MathAcosh;
const MathAsin = Math.asin;
exports.MathAsin = MathAsin;
const MathAsinh = Math.asinh;
exports.MathAsinh = MathAsinh;
const MathAtan = Math.atan;
exports.MathAtan = MathAtan;
const MathAtanh = Math.atanh;
exports.MathAtanh = MathAtanh;
const MathAtan2 = Math.atan2;
exports.MathAtan2 = MathAtan2;
const MathCbrt = Math.cbrt;
exports.MathCbrt = MathCbrt;
const MathCeil = Math.ceil;
exports.MathCeil = MathCeil;
const MathClz32 = Math.clz32;
exports.MathClz32 = MathClz32;
const MathCos = Math.cos;
exports.MathCos = MathCos;
const MathCosh = Math.cosh;
exports.MathCosh = MathCosh;
const MathExp = Math.exp;
exports.MathExp = MathExp;
const MathExpm1 = Math.expm1;
exports.MathExpm1 = MathExpm1;
const MathFloor = Math.floor;
exports.MathFloor = MathFloor;
const MathFround = Math.fround;
exports.MathFround = MathFround;
const MathHypot = Math.hypot;
exports.MathHypot = MathHypot;
const MathImul = Math.imul;
exports.MathImul = MathImul;
const MathLog = Math.log;
exports.MathLog = MathLog;
const MathLog1p = Math.log1p;
exports.MathLog1p = MathLog1p;
const MathLog10 = Math.log10;
exports.MathLog10 = MathLog10;
const MathLog2 = Math.log2;
exports.MathLog2 = MathLog2;
const MathMax = Math.max;
exports.MathMax = MathMax;
const MathMin = Math.min;
exports.MathMin = MathMin;
const MathPow = Math.pow;
exports.MathPow = MathPow;
const MathRandom = Math.random;
exports.MathRandom = MathRandom;
const MathRound = Math.round;
exports.MathRound = MathRound;
const MathSign = Math.sign;
exports.MathSign = MathSign;
const MathSin = Math.sin;
exports.MathSin = MathSin;
const MathSinh = Math.sinh;
exports.MathSinh = MathSinh;
const MathSqrt = Math.sqrt;
exports.MathSqrt = MathSqrt;
const MathTan = Math.tan;
exports.MathTan = MathTan;
const MathTanh = Math.tanh;
exports.MathTanh = MathTanh;
const MathTrunc = Math.trunc;
exports.MathTrunc = MathTrunc;

const NumberEPSILON = Number.EPSILON;
exports.NumberEPSILON = NumberEPSILON;
const NumberMAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;
exports.NumberMAX_SAFE_INTEGER = NumberMAX_SAFE_INTEGER;
const NumberMAX_VALUE = Number.MAX_VALUE;
exports.NumberMAX_VALUE = NumberMAX_VALUE;
const NumberMIN_SAFE_INTEGER = Number.MIN_SAFE_INTEGER;
exports.NumberMIN_SAFE_INTEGER = NumberMIN_SAFE_INTEGER;
const NumberMIN_VALUE = Number.MIN_VALUE;
exports.NumberMIN_VALUE = NumberMIN_VALUE;
const NumberNaN = Number.NaN;
exports.NumberNaN = NumberNaN;
const NumberNEGATIVE_INFINITY = Number.NEGATIVE_INFINITY;
exports.NumberNEGATIVE_INFINITY = NumberNEGATIVE_INFINITY;
const NumberPOSITIVE_INFINITY = Number.POSITIVE_INFINITY;
exports.NumberPOSITIVE_INFINITY = NumberPOSITIVE_INFINITY;
const NumberIsFinite = Number.isFinite;
exports.NumberIsFinite = NumberIsFinite;
const NumberIsInteger = Number.isInteger;
exports.NumberIsInteger = NumberIsInteger;
const NumberIsNaN = Number.isNaN;
exports.NumberIsNaN = NumberIsNaN;
const NumberIsSafeInteger = Number.isSafeInteger;
exports.NumberIsSafeInteger = NumberIsSafeInteger;
const NumberParseFloat = parseFloat;
exports.NumberParseFloat = NumberParseFloat;
const NumberParseInt = parseInt;
exports.NumberParseInt = NumberParseInt;
const NumberPrototype = Number.prototype;
exports.NumberPrototype = NumberPrototype;
const NumberPrototypeToExponential = NumberPrototype.toExponential;
exports.NumberPrototypeToExponential = NumberPrototypeToExponential;
const NumberPrototypeToFixed = NumberPrototype.toFixed;
exports.NumberPrototypeToFixed = NumberPrototypeToFixed;
const NumberPrototypeToLocaleString = NumberPrototype.toLocaleString;
exports.NumberPrototypeToLocaleString = NumberPrototypeToLocaleString;
const NumberPrototypeToPrecision = NumberPrototype.toPrecision;
exports.NumberPrototypeToPrecision = NumberPrototypeToPrecision;
const NumberPrototypeToString = NumberPrototype.toString;
exports.NumberPrototypeToString = NumberPrototypeToString;
const NumberPrototypeValueOf = NumberPrototype.valueOf;
exports.NumberPrototypeValueOf = NumberPrototypeValueOf;

const ObjectAssign = Object.assign;
exports.ObjectAssign = ObjectAssign;
const ObjectCreate = Object.create;
exports.ObjectCreate = ObjectCreate;
const ObjectDefineProperties = Object.defineProperties;
exports.ObjectDefineProperties = ObjectDefineProperties;
const ObjectDefineProperty = Object.defineProperty;
exports.ObjectDefineProperty = ObjectDefineProperty;
const ObjectEntries = Object.entries;
exports.ObjectEntries = ObjectEntries;
const ObjectFreeze = Object.freeze;
exports.ObjectFreeze = ObjectFreeze;
const ObjectFromEntries = Object.fromEntries;
exports.ObjectFromEntries = ObjectFromEntries;
const ObjectGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
exports.ObjectGetOwnPropertyDescriptor = ObjectGetOwnPropertyDescriptor;
const ObjectGetOwnPropertyDescriptors = Object.getOwnPropertyDescriptors;
exports.ObjectGetOwnPropertyDescriptors = ObjectGetOwnPropertyDescriptors;
const ObjectGetOwnPropertyNames = Object.getOwnPropertyNames;
exports.ObjectGetOwnPropertyNames = ObjectGetOwnPropertyNames;
const ObjectGetOwnPropertySymbols = Object.getOwnPropertySymbols;
exports.ObjectGetOwnPropertySymbols = ObjectGetOwnPropertySymbols;
const ObjectGetPrototypeOf = Object.getPrototypeOf;
exports.ObjectGetPrototypeOf = ObjectGetPrototypeOf;
const ObjectHasOwn = Object.hasOwn;
exports.ObjectHasOwn = ObjectHasOwn;
const ObjectIs = Object.is;
exports.ObjectIs = ObjectIs;
const ObjectIsExtensible = Object.isExtensible;
exports.ObjectIsExtensible = ObjectIsExtensible;
const ObjectIsFrozen = Object.isFrozen;
exports.ObjectIsFrozen = ObjectIsFrozen;
const ObjectIsSealed = Object.isSealed;
exports.ObjectIsSealed = ObjectIsSealed;
const ObjectKeys = Object.keys;
exports.ObjectKeys = ObjectKeys;
const ObjectPreventExtensions = Object.preventExtensions;
exports.ObjectPreventExtensions = ObjectPreventExtensions;
const ObjectPrototype = Object.prototype;
exports.ObjectPrototype = ObjectPrototype;
const ObjectSeal = Object.seal;
exports.ObjectSeal = ObjectSeal;
const ObjectSetPrototypeOf = Object.setPrototypeOf;
exports.ObjectSetPrototypeOf = ObjectSetPrototypeOf;
const ObjectValues = Object.values;
exports.ObjectValues = ObjectValues;
const ObjectPrototypeHasOwnProperty = ObjectPrototype.hasOwnProperty;
exports.ObjectPrototypeHasOwnProperty = ObjectPrototypeHasOwnProperty;
const ObjectPrototypeIsPrototypeOf = ObjectPrototype.isPrototypeOf;
exports.ObjectPrototypeIsPrototypeOf = ObjectPrototypeIsPrototypeOf;
const ObjectPrototypePropertyIsEnumerable = ObjectPrototype.propertyIsEnumerable;
exports.ObjectPrototypePropertyIsEnumerable = ObjectPrototypePropertyIsEnumerable;
const ObjectPrototypeToLocaleString = ObjectPrototype.toLocaleString;
exports.ObjectPrototypeToLocaleString = ObjectPrototypeToLocaleString;
const ObjectPrototypeToString = ObjectPrototype.toString;
exports.ObjectPrototypeToString = ObjectPrototypeToString;
const ObjectPrototypeValueOf = ObjectPrototype.valueOf;
exports.ObjectPrototypeValueOf = ObjectPrototypeValueOf;

const $PromiseAll = Promise.all;
exports.$PromiseAll = $PromiseAll;
const $PromiseAllSettled = Promise.allSettled;
exports.$PromiseAllSettled = $PromiseAllSettled;
const $PromiseAny = Promise.any;
exports.$PromiseAny = $PromiseAny;
const PromisePrototype = Promise.prototype;
exports.PromisePrototype = PromisePrototype;
const $PromiseRace = Promise.race;
exports.$PromiseRace = $PromiseRace;
const $PromiseReject = Promise.reject;
exports.$PromiseReject = $PromiseReject;
const $PromiseResolve = Promise.resolve;
exports.$PromiseResolve = $PromiseResolve;
const PromisePrototypeCatch = PromisePrototype.catch;
exports.PromisePrototypeCatch = PromisePrototypeCatch;
const PromisePrototypeFinally = PromisePrototype.finally;
exports.PromisePrototypeFinally = PromisePrototypeFinally;
const PromisePrototypeThen = PromisePrototype.then;
exports.PromisePrototypeThen = PromisePrototypeThen;

const ProxyRevocable = Proxy.revocable;
exports.ProxyRevocable = ProxyRevocable;

const RangeErrorPrototype = RangeError.prototype;
exports.RangeErrorPrototype = RangeErrorPrototype;

const ReferenceErrorPrototype = ReferenceError.prototype;
exports.ReferenceErrorPrototype = ReferenceErrorPrototype;

const ReflectApply = Reflect.apply;
exports.ReflectApply = ReflectApply;
const ReflectConstruct = Reflect.construct;
exports.ReflectConstruct = ReflectConstruct;
const ReflectDefineProperty = Reflect.defineProperty;
exports.ReflectDefineProperty = ReflectDefineProperty;
const ReflectDeleteProperty = Reflect.deleteProperty;
exports.ReflectDeleteProperty = ReflectDeleteProperty;
const ReflectGet = Reflect.get;
exports.ReflectGet = ReflectGet;
const ReflectGetOwnPropertyDescriptor = Reflect.getOwnPropertyDescriptor;
exports.ReflectGetOwnPropertyDescriptor = ReflectGetOwnPropertyDescriptor;
const ReflectGetPrototypeOf = Reflect.getPrototypeOf;
exports.ReflectGetPrototypeOf = ReflectGetPrototypeOf;
const ReflectHas = Reflect.has;
exports.ReflectHas = ReflectHas;
const ReflectIsExtensible = Reflect.isExtensible;
exports.ReflectIsExtensible = ReflectIsExtensible;
const ReflectOwnKeys = Reflect.ownKeys;
exports.ReflectOwnKeys = ReflectOwnKeys;
const ReflectPreventExtensions = Reflect.preventExtensions;
exports.ReflectPreventExtensions = ReflectPreventExtensions;
const ReflectSet = Reflect.set;
exports.ReflectSet = ReflectSet;

const RegExpPrototype = RegExp.prototype;
exports.RegExpPrototype = RegExpPrototype;
const RegExpPrototypeExec = RegExpPrototype.exec;
exports.RegExpPrototypeExec = RegExpPrototypeExec;
const RegExpPrototypeTest = RegExpPrototype.test;
exports.RegExpPrototypeTest = RegExpPrototypeTest;
const RegExpPrototypeToString = RegExpPrototype.toString;
exports.RegExpPrototypeToString = RegExpPrototypeToString;

const SetPrototype = Set.prototype;
exports.SetPrototype = SetPrototype;
const SetPrototypeAdd = SetPrototype.add;
exports.SetPrototypeAdd = SetPrototypeAdd;
const SetPrototypeClear = SetPrototype.clear;
exports.SetPrototypeClear = SetPrototypeClear;
const SetPrototypeDelete = SetPrototype.delete;
exports.SetPrototypeDelete = SetPrototypeDelete;
const SetPrototypeEntries = SetPrototype.entries;
exports.SetPrototypeEntries = SetPrototypeEntries;
const SetPrototypeForEach = SetPrototype.forEach;
exports.SetPrototypeForEach = SetPrototypeForEach;
const SetPrototypeHas = SetPrototype.has;
exports.SetPrototypeHas = SetPrototypeHas;
const SetPrototypeKeys = SetPrototype.keys;
exports.SetPrototypeKeys = SetPrototypeKeys;
const SetPrototypeValues = SetPrototype.values;
exports.SetPrototypeValues = SetPrototypeValues;
const SetPrototypeSymbolIterator = SetPrototypeValues;
exports.SetPrototypeSymbolIterator = SetPrototypeSymbolIterator;

const SharedArrayBufferPrototype = SharedArrayBuffer ? SharedArrayBuffer.prototype : undefined;
exports.SharedArrayBufferPrototype = SharedArrayBufferPrototype;
const SharedArrayBufferPrototypeSlice = SharedArrayBufferPrototype ? SharedArrayBufferPrototype.slice : undefined;
exports.SharedArrayBufferPrototypeSlice = SharedArrayBufferPrototypeSlice;

const StringFromCharCode = String.fromCharCode;
exports.StringFromCharCode = StringFromCharCode;
const StringFromCodePoint = String.fromCodePoint;
exports.StringFromCodePoint = StringFromCodePoint;
const StringPrototype = String.prototype;
exports.StringPrototype = StringPrototype;
const StringRaw = String.raw;
exports.StringRaw = StringRaw;
const StringPrototypeAt = StringPrototype.at;
exports.StringPrototypeAt = StringPrototypeAt;
const StringPrototypeCharAt = StringPrototype.charAt;
exports.StringPrototypeCharAt = StringPrototypeCharAt;
const StringPrototypeCharCodeAt = StringPrototype.charCodeAt;
exports.StringPrototypeCharCodeAt = StringPrototypeCharCodeAt;
const StringPrototypeCodePointAt = StringPrototype.codePointAt;
exports.StringPrototypeCodePointAt = StringPrototypeCodePointAt;
const StringPrototypeConcat = StringPrototype.concat;
exports.StringPrototypeConcat = StringPrototypeConcat;
const StringPrototypeEndsWith = StringPrototype.endsWith;
exports.StringPrototypeEndsWith = StringPrototypeEndsWith;
const StringPrototypeIncludes = StringPrototype.includes;
exports.StringPrototypeIncludes = StringPrototypeIncludes;
const StringPrototypeIndexOf = StringPrototype.indexOf;
exports.StringPrototypeIndexOf = StringPrototypeIndexOf;
const StringPrototypeLastIndexOf = StringPrototype.lastIndexOf;
exports.StringPrototypeLastIndexOf = StringPrototypeLastIndexOf;
const StringPrototypeLocaleCompare = StringPrototype.localeCompare;
exports.StringPrototypeLocaleCompare = StringPrototypeLocaleCompare;
const StringPrototypeMatch = StringPrototype.match;
exports.StringPrototypeMatch = StringPrototypeMatch;
const StringPrototypeMatchAll = StringPrototype.matchAll;
exports.StringPrototypeMatchAll = StringPrototypeMatchAll;
const StringPrototypeNormalize = StringPrototype.normalize;
exports.StringPrototypeNormalize = StringPrototypeNormalize;
const StringPrototypePadEnd = StringPrototype.padEnd;
exports.StringPrototypePadEnd = StringPrototypePadEnd;
const StringPrototypePadStart = StringPrototype.padStart;
exports.StringPrototypePadStart = StringPrototypePadStart;
const StringPrototypeRepeat = StringPrototype.repeat;
exports.StringPrototypeRepeat = StringPrototypeRepeat;
const StringPrototypeReplace = StringPrototype.replace;
exports.StringPrototypeReplace = StringPrototypeReplace;
const StringPrototypeReplaceAll = StringPrototype.replaceAll;
exports.StringPrototypeReplaceAll = StringPrototypeReplaceAll;
const StringPrototypeSearch = StringPrototype.search;
exports.StringPrototypeSearch = StringPrototypeSearch;
const StringPrototypeSlice = StringPrototype.slice;
exports.StringPrototypeSlice = StringPrototypeSlice;
const StringPrototypeSplit = StringPrototype.split;
exports.StringPrototypeSplit = StringPrototypeSplit;
const StringPrototypeStartsWith = StringPrototype.startsWith;
exports.StringPrototypeStartsWith = StringPrototypeStartsWith;
const StringPrototypeSubstring = StringPrototype.substring;
exports.StringPrototypeSubstring = StringPrototypeSubstring;
const StringPrototypeToLocaleLowerCase = StringPrototype.toLocaleLowerCase;
exports.StringPrototypeToLocaleLowerCase = StringPrototypeToLocaleLowerCase;
const StringPrototypeToLocaleUpperCase = StringPrototype.toLocaleUpperCase;
exports.StringPrototypeToLocaleUpperCase = StringPrototypeToLocaleUpperCase;
const StringPrototypeToLowerCase = StringPrototype.toLowerCase;
exports.StringPrototypeToLowerCase = StringPrototypeToLowerCase;
const StringPrototypeToString = StringPrototype.toString;
exports.StringPrototypeToString = StringPrototypeToString;
const StringPrototypeToUpperCase = StringPrototype.toUpperCase;
exports.StringPrototypeToUpperCase = StringPrototypeToUpperCase;
const StringPrototypeTrim = StringPrototype.trim;
exports.StringPrototypeTrim = StringPrototypeTrim;
const StringPrototypeTrimEnd = StringPrototype.trimEnd;
exports.StringPrototypeTrimEnd = StringPrototypeTrimEnd;
const StringPrototypeTrimStart = StringPrototype.trimStart;
exports.StringPrototypeTrimStart = StringPrototypeTrimStart;
const StringPrototypeValueOf = StringPrototype.valueOf;
exports.StringPrototypeValueOf = StringPrototypeValueOf;

const SymbolAsyncIterator = Symbol.asyncIterator;
exports.SymbolAsyncIterator = SymbolAsyncIterator;
const SymbolFor = Symbol.for;
exports.SymbolFor = SymbolFor;
const SymbolHasInstance = Symbol.hasInstance;
exports.SymbolHasInstance = SymbolHasInstance;
const SymbolIsConcatSpreadable = Symbol.isConcatSpreadable;
exports.SymbolIsConcatSpreadable = SymbolIsConcatSpreadable;
const SymbolIterator = Symbol.iterator;
exports.SymbolIterator = SymbolIterator;
const SymbolKeyFor = Symbol.keyFor;
exports.SymbolKeyFor = SymbolKeyFor;
const SymbolMatch = Symbol.match;
exports.SymbolMatch = SymbolMatch;
const SymbolMatchAll = Symbol.matchAll;
exports.SymbolMatchAll = SymbolMatchAll;
const SymbolPrototype = Symbol.prototype;
exports.SymbolPrototype = SymbolPrototype;
const SymbolReplace = Symbol.replace;
exports.SymbolReplace = SymbolReplace;
const SymbolSearch = Symbol.search;
exports.SymbolSearch = SymbolSearch;
const SymbolSpecies = Symbol.species;
exports.SymbolSpecies = SymbolSpecies;
const SymbolSplit = Symbol.split;
exports.SymbolSplit = SymbolSplit;
const SymbolToPrimitive = Symbol.toPrimitive;
exports.SymbolToPrimitive = SymbolToPrimitive;
const SymbolToStringTag = Symbol.toStringTag;
exports.SymbolToStringTag = SymbolToStringTag;
const SymbolUnscopables = Symbol.unscopables;
exports.SymbolUnscopables = SymbolUnscopables;
const SymbolPrototypeToString = SymbolPrototype.toString;
exports.SymbolPrototypeToString = SymbolPrototypeToString;
const SymbolPrototypeValueOf = SymbolPrototype.valueOf;
exports.SymbolPrototypeValueOf = SymbolPrototypeValueOf;

const SyntaxErrorPrototype = SyntaxError.prototype;
exports.SyntaxErrorPrototype = SyntaxErrorPrototype;

const TypeErrorPrototype = TypeError.prototype;
exports.TypeErrorPrototype = TypeErrorPrototype;

const Uint8ArrayBYTES_PER_ELEMENT = Uint8Array.BYTES_PER_ELEMENT;
exports.Uint8ArrayBYTES_PER_ELEMENT = Uint8ArrayBYTES_PER_ELEMENT;
const Uint8ArrayPrototype = Uint8Array.prototype;
exports.Uint8ArrayPrototype = Uint8ArrayPrototype;

const Uint8ClampedArrayBYTES_PER_ELEMENT = Uint8ClampedArray.BYTES_PER_ELEMENT;
exports.Uint8ClampedArrayBYTES_PER_ELEMENT = Uint8ClampedArrayBYTES_PER_ELEMENT;
const Uint8ClampedArrayPrototype = Uint8ClampedArray.prototype;
exports.Uint8ClampedArrayPrototype = Uint8ClampedArrayPrototype;

const Uint16ArrayBYTES_PER_ELEMENT = Uint16Array.BYTES_PER_ELEMENT;
exports.Uint16ArrayBYTES_PER_ELEMENT = Uint16ArrayBYTES_PER_ELEMENT;
const Uint16ArrayPrototype = Uint16Array.prototype;
exports.Uint16ArrayPrototype = Uint16ArrayPrototype;

const Uint32ArrayBYTES_PER_ELEMENT = Uint32Array.BYTES_PER_ELEMENT;
exports.Uint32ArrayBYTES_PER_ELEMENT = Uint32ArrayBYTES_PER_ELEMENT;
const Uint32ArrayPrototype = Uint32Array.prototype;
exports.Uint32ArrayPrototype = Uint32ArrayPrototype;

const URIErrorPrototype = URIError.prototype;
exports.URIErrorPrototype = URIErrorPrototype;

const WeakMapPrototype = WeakMap.prototype;
exports.WeakMapPrototype = WeakMapPrototype;
const WeakMapPrototypeDelete = WeakMapPrototype.delete;
exports.WeakMapPrototypeDelete = WeakMapPrototypeDelete;
const WeakMapPrototypeGet = WeakMapPrototype.get;
exports.WeakMapPrototypeGet = WeakMapPrototypeGet;
const WeakMapPrototypeHas = WeakMapPrototype.has;
exports.WeakMapPrototypeHas = WeakMapPrototypeHas;
const WeakMapPrototypeSet = WeakMapPrototype.set;
exports.WeakMapPrototypeSet = WeakMapPrototypeSet;

const WeakRefPrototype = WeakRef ? WeakRef.prototype : undefined;
exports.WeakRefPrototype = WeakRefPrototype;
const WeakRefPrototypeDeref = WeakRefPrototype ? WeakRefPrototype.deref : undefined;
exports.WeakRefPrototypeDeref = WeakRefPrototypeDeref;

const WeakSetPrototype = WeakSet.prototype;
exports.WeakSetPrototype = WeakSetPrototype;
const WeakSetPrototypeAdd = WeakSetPrototype.add;
exports.WeakSetPrototypeAdd = WeakSetPrototypeAdd;
const WeakSetPrototypeDelete = WeakSetPrototype.delete;
exports.WeakSetPrototypeDelete = WeakSetPrototypeDelete;
const WeakSetPrototypeHas = WeakSetPrototype.has;
exports.WeakSetPrototypeHas = WeakSetPrototypeHas;

const ArrayPrototypeSymbolUnscopables = ArrayPrototype[SymbolUnscopables];
exports.ArrayPrototypeSymbolUnscopables = ArrayPrototypeSymbolUnscopables;

const ArrayBufferPrototypeByteLength = ReflectGetOwnPropertyDescriptor(ArrayBufferPrototype, 'byteLength').get;
exports.ArrayBufferPrototypeByteLength = ArrayBufferPrototypeByteLength;
const ArrayBufferPrototypeSymbolToStringTag = ArrayBufferPrototype[SymbolToStringTag];
exports.ArrayBufferPrototypeSymbolToStringTag = ArrayBufferPrototypeSymbolToStringTag;

const AtomicsSymbolToStringTag = Atomics ? Atomics[SymbolToStringTag] : undefined;
exports.AtomicsSymbolToStringTag = AtomicsSymbolToStringTag;

const BigIntPrototypeSymbolToStringTag = BigIntPrototype ? BigIntPrototype[SymbolToStringTag] : undefined;
exports.BigIntPrototypeSymbolToStringTag = BigIntPrototypeSymbolToStringTag;

const DataViewPrototypeBuffer = ReflectGetOwnPropertyDescriptor(DataViewPrototype, 'buffer').get;
exports.DataViewPrototypeBuffer = DataViewPrototypeBuffer;
const DataViewPrototypeByteLength = ReflectGetOwnPropertyDescriptor(DataViewPrototype, 'byteLength').get;
exports.DataViewPrototypeByteLength = DataViewPrototypeByteLength;
const DataViewPrototypeByteOffset = ReflectGetOwnPropertyDescriptor(DataViewPrototype, 'byteOffset').get;
exports.DataViewPrototypeByteOffset = DataViewPrototypeByteOffset;
const DataViewPrototypeSymbolToStringTag = DataViewPrototype[SymbolToStringTag];
exports.DataViewPrototypeSymbolToStringTag = DataViewPrototypeSymbolToStringTag;

const DatePrototypeSymbolToPrimitive = DatePrototype[SymbolToPrimitive];
exports.DatePrototypeSymbolToPrimitive = DatePrototypeSymbolToPrimitive;

const FinalizationRegistryPrototypeSymbolToStringTag = FinalizationRegistryPrototype ? FinalizationRegistryPrototype[SymbolToStringTag] : undefined;
exports.FinalizationRegistryPrototypeSymbolToStringTag = FinalizationRegistryPrototypeSymbolToStringTag;

const FunctionPrototypeSymbolHasInstance = FunctionPrototype[SymbolHasInstance];
exports.FunctionPrototypeSymbolHasInstance = FunctionPrototypeSymbolHasInstance;

const JSONSymbolToStringTag = JSON[SymbolToStringTag];
exports.JSONSymbolToStringTag = JSONSymbolToStringTag;

const MapPrototypeSize = ReflectGetOwnPropertyDescriptor(MapPrototype, 'size').get;
exports.MapPrototypeSize = MapPrototypeSize;
const MapPrototypeSymbolToStringTag = MapPrototype[SymbolToStringTag];
exports.MapPrototypeSymbolToStringTag = MapPrototypeSymbolToStringTag;

const MathSymbolToStringTag = Math[SymbolToStringTag];
exports.MathSymbolToStringTag = MathSymbolToStringTag;

const PromisePrototypeSymbolToStringTag = PromisePrototype[SymbolToStringTag];
exports.PromisePrototypeSymbolToStringTag = PromisePrototypeSymbolToStringTag;

const ReflectSymbolToStringTag = Reflect[SymbolToStringTag];
exports.ReflectSymbolToStringTag = ReflectSymbolToStringTag;

const RegExpPrototypeDotAll = ReflectHas(RegExpPrototype, 'dotAll') ? ReflectGetOwnPropertyDescriptor(RegExpPrototype, 'dotAll').get : undefined;
exports.RegExpPrototypeDotAll = RegExpPrototypeDotAll;
const RegExpPrototypeFlags = ReflectGetOwnPropertyDescriptor(RegExpPrototype, 'flags').get;
exports.RegExpPrototypeFlags = RegExpPrototypeFlags;
const RegExpPrototypeGlobal = ReflectGetOwnPropertyDescriptor(RegExpPrototype, 'global').get;
exports.RegExpPrototypeGlobal = RegExpPrototypeGlobal;
const RegExpPrototypeIgnoreCase = ReflectGetOwnPropertyDescriptor(RegExpPrototype, 'ignoreCase').get;
exports.RegExpPrototypeIgnoreCase = RegExpPrototypeIgnoreCase;
const RegExpPrototypeMultiline = ReflectGetOwnPropertyDescriptor(RegExpPrototype, 'multiline').get;
exports.RegExpPrototypeMultiline = RegExpPrototypeMultiline;
const RegExpPrototypeSource = ReflectGetOwnPropertyDescriptor(RegExpPrototype, 'source').get;
exports.RegExpPrototypeSource = RegExpPrototypeSource;
const RegExpPrototypeSticky = ReflectGetOwnPropertyDescriptor(RegExpPrototype, 'sticky').get;
exports.RegExpPrototypeSticky = RegExpPrototypeSticky;
const RegExpPrototypeUnicode = ReflectGetOwnPropertyDescriptor(RegExpPrototype, 'unicode').get;
exports.RegExpPrototypeUnicode = RegExpPrototypeUnicode;
const RegExpPrototypeSymbolMatch = RegExpPrototype[SymbolMatch];
exports.RegExpPrototypeSymbolMatch = RegExpPrototypeSymbolMatch;
const RegExpPrototypeSymbolMatchAll = RegExpPrototype[SymbolMatchAll];
exports.RegExpPrototypeSymbolMatchAll = RegExpPrototypeSymbolMatchAll;
const RegExpPrototypeSymbolReplace = RegExpPrototype[SymbolReplace];
exports.RegExpPrototypeSymbolReplace = RegExpPrototypeSymbolReplace;
const RegExpPrototypeSymbolSearch = RegExpPrototype[SymbolSearch];
exports.RegExpPrototypeSymbolSearch = RegExpPrototypeSymbolSearch;
const RegExpPrototypeSymbolSplit = RegExpPrototype[SymbolSplit];
exports.RegExpPrototypeSymbolSplit = RegExpPrototypeSymbolSplit;

const SetPrototypeSize = ReflectGetOwnPropertyDescriptor(SetPrototype, 'size').get;
exports.SetPrototypeSize = SetPrototypeSize;
const SetPrototypeSymbolToStringTag = SetPrototype[SymbolToStringTag];
exports.SetPrototypeSymbolToStringTag = SetPrototypeSymbolToStringTag;

const SharedArrayBufferPrototypeByteLength = SharedArrayBufferPrototype ? ReflectGetOwnPropertyDescriptor(SharedArrayBufferPrototype, 'byteLength').get : undefined;
exports.SharedArrayBufferPrototypeByteLength = SharedArrayBufferPrototypeByteLength;
const SharedArrayBufferPrototypeSymbolToStringTag = SharedArrayBufferPrototype ? SharedArrayBufferPrototype[SymbolToStringTag] : undefined;
exports.SharedArrayBufferPrototypeSymbolToStringTag = SharedArrayBufferPrototypeSymbolToStringTag;

const StringPrototypeSymbolIterator = StringPrototype[SymbolIterator];
exports.StringPrototypeSymbolIterator = StringPrototypeSymbolIterator;

const SymbolPrototypeDescription = ReflectHas(SymbolPrototype, 'description') ? ReflectGetOwnPropertyDescriptor(SymbolPrototype, 'description').get : undefined;
exports.SymbolPrototypeDescription = SymbolPrototypeDescription;
const SymbolPrototypeSymbolToPrimitive = SymbolPrototype[SymbolToPrimitive];
exports.SymbolPrototypeSymbolToPrimitive = SymbolPrototypeSymbolToPrimitive;
const SymbolPrototypeSymbolToStringTag = SymbolPrototype[SymbolToStringTag];
exports.SymbolPrototypeSymbolToStringTag = SymbolPrototypeSymbolToStringTag;

const WeakMapPrototypeSymbolToStringTag = WeakMapPrototype[SymbolToStringTag];
exports.WeakMapPrototypeSymbolToStringTag = WeakMapPrototypeSymbolToStringTag;

const WeakRefPrototypeSymbolToStringTag = WeakRefPrototype ? WeakRefPrototype[SymbolToStringTag] : WeakRefPrototype;
exports.WeakRefPrototypeSymbolToStringTag = WeakRefPrototypeSymbolToStringTag;

const WeakSetPrototypeSymbolToStringTag = WeakSetPrototype[SymbolToStringTag];
exports.WeakSetPrototypeSymbolToStringTag = WeakSetPrototypeSymbolToStringTag;

const uncurryThis = FunctionPrototypeBind.bind(FunctionPrototypeCall);
exports.uncurryThis = uncurryThis;

const ArrayAt = ArrayPrototypeAt ? uncurryThis(ArrayPrototypeAt) : undefined;
exports.ArrayAt = ArrayAt;
const ArrayConcat = uncurryThis(ArrayPrototypeConcat);
exports.ArrayConcat = ArrayConcat;
const ArrayCopyWithin = uncurryThis(ArrayPrototypeCopyWithin);
exports.ArrayCopyWithin = ArrayCopyWithin;
const ArrayEntries = uncurryThis(ArrayPrototypeEntries);
exports.ArrayEntries = ArrayEntries;
const ArrayEvery = uncurryThis(ArrayPrototypeEvery);
exports.ArrayEvery = ArrayEvery;
const ArrayFill = uncurryThis(ArrayPrototypeFill);
exports.ArrayFill = ArrayFill;
const ArrayFilter = uncurryThis(ArrayPrototypeFilter);
exports.ArrayFilter = ArrayFilter;
const ArrayFind = uncurryThis(ArrayPrototypeFind);
exports.ArrayFind = ArrayFind;
const ArrayFindIndex = uncurryThis(ArrayPrototypeFindIndex);
exports.ArrayFindIndex = ArrayFindIndex;
const ArrayFlat = ArrayPrototypeFlat ? uncurryThis(ArrayPrototypeFlat) : undefined;
exports.ArrayFlat = ArrayFlat;
const ArrayFlatMap = ArrayPrototypeFlatMap ? uncurryThis(ArrayPrototypeFlatMap) : undefined;
exports.ArrayFlatMap = ArrayFlatMap;
const ArrayForEach = uncurryThis(ArrayPrototypeForEach);
exports.ArrayForEach = ArrayForEach;
const ArrayIncludes = ArrayPrototypeIncludes ? uncurryThis(ArrayPrototypeIncludes) : undefined;
exports.ArrayIncludes = ArrayIncludes;
const ArrayIndexOf = uncurryThis(ArrayPrototypeIndexOf);
exports.ArrayIndexOf = ArrayIndexOf;
const ArrayJoin = uncurryThis(ArrayPrototypeJoin);
exports.ArrayJoin = ArrayJoin;
const ArrayKeys = uncurryThis(ArrayPrototypeKeys);
exports.ArrayKeys = ArrayKeys;
const ArrayLastIndexOf = uncurryThis(ArrayPrototypeLastIndexOf);
exports.ArrayLastIndexOf = ArrayLastIndexOf;
const ArrayMap = uncurryThis(ArrayPrototypeMap);
exports.ArrayMap = ArrayMap;
const ArrayPop = uncurryThis(ArrayPrototypePop);
exports.ArrayPop = ArrayPop;
const ArrayPush = uncurryThis(ArrayPrototypePush);
exports.ArrayPush = ArrayPush;
const ArrayReduce = uncurryThis(ArrayPrototypeReduce);
exports.ArrayReduce = ArrayReduce;
const ArrayReduceRight = uncurryThis(ArrayPrototypeReduceRight);
exports.ArrayReduceRight = ArrayReduceRight;
const ArrayReverse = uncurryThis(ArrayPrototypeReverse);
exports.ArrayReverse = ArrayReverse;
const ArrayShift = uncurryThis(ArrayPrototypeShift);
exports.ArrayShift = ArrayShift;
const ArraySlice = uncurryThis(ArrayPrototypeSlice);
exports.ArraySlice = ArraySlice;
const ArraySome = uncurryThis(ArrayPrototypeSome);
exports.ArraySome = ArraySome;
const ArraySort = uncurryThis(ArrayPrototypeSort);
exports.ArraySort = ArraySort;
const ArraySplice = uncurryThis(ArrayPrototypeSplice);
exports.ArraySplice = ArraySplice;
const ArrayToLocaleString = uncurryThis(ArrayPrototypeToLocaleString);
exports.ArrayToLocaleString = ArrayToLocaleString;
const ArrayToString = uncurryThis(ArrayPrototypeToString);
exports.ArrayToString = ArrayToString;
const ArrayUnshift = uncurryThis(ArrayPrototypeUnshift);
exports.ArrayUnshift = ArrayUnshift;
const ArrayValues = uncurryThis(ArrayPrototypeValues);
exports.ArrayValues = ArrayValues;
const ArraySymbolIterator = ArrayValues;
exports.ArraySymbolIterator = ArraySymbolIterator;

const ArrayBufferByteLength = uncurryThis(ArrayBufferPrototypeByteLength);
exports.ArrayBufferByteLength = ArrayBufferByteLength;
const ArrayBufferSlice = uncurryThis(ArrayBufferPrototypeSlice);
exports.ArrayBufferSlice = ArrayBufferSlice;

const BigIntToLocaleString = BigIntPrototypeToLocaleString ? uncurryThis(BigIntPrototypeToLocaleString) : undefined;
exports.BigIntToLocaleString = BigIntToLocaleString;
const BigIntToString = BigIntPrototypeToString ? uncurryThis(BigIntPrototypeToString) : undefined;
exports.BigIntToString = BigIntToString;
const BigIntValueOf = BigIntPrototypeValueOf ? uncurryThis(BigIntPrototypeValueOf) : undefined;
exports.BigIntValueOf = BigIntValueOf;

const BooleanToString = uncurryThis(BooleanPrototypeToString);
exports.BooleanToString = BooleanToString;
const BooleanValueOf = uncurryThis(BooleanPrototypeValueOf);
exports.BooleanValueOf = BooleanValueOf;

const DataViewBuffer = uncurryThis(DataViewPrototypeBuffer);
exports.DataViewBuffer = DataViewBuffer;
const DataViewByteLength = uncurryThis(DataViewPrototypeByteLength);
exports.DataViewByteLength = DataViewByteLength;
const DataViewByteOffset = uncurryThis(DataViewPrototypeByteOffset);
exports.DataViewByteOffset = DataViewByteOffset;
const DataViewGetBigInt64 = DataViewPrototypeGetBigInt64 ? uncurryThis(DataViewPrototypeGetBigInt64) : undefined;
exports.DataViewGetBigInt64 = DataViewGetBigInt64;
const DataViewGetBigUint64 = DataViewPrototypeGetBigUint64 ? uncurryThis(DataViewPrototypeGetBigUint64) : undefined;
exports.DataViewGetBigUint64 = DataViewGetBigUint64;
const DataViewGetFloat32 = uncurryThis(DataViewPrototypeGetFloat32);
exports.DataViewGetFloat32 = DataViewGetFloat32;
const DataViewGetFloat64 = uncurryThis(DataViewPrototypeGetFloat64);
exports.DataViewGetFloat64 = DataViewGetFloat64;
const DataViewGetInt8 = uncurryThis(DataViewPrototypeGetInt8);
exports.DataViewGetInt8 = DataViewGetInt8;
const DataViewGetInt16 = uncurryThis(DataViewPrototypeGetInt16);
exports.DataViewGetInt16 = DataViewGetInt16;
const DataViewGetInt32 = uncurryThis(DataViewPrototypeGetInt32);
exports.DataViewGetInt32 = DataViewGetInt32;
const DataViewGetUint8 = uncurryThis(DataViewPrototypeGetUint8);
exports.DataViewGetUint8 = DataViewGetUint8;
const DataViewGetUint16 = uncurryThis(DataViewPrototypeGetUint16);
exports.DataViewGetUint16 = DataViewGetUint16;
const DataViewGetUint32 = uncurryThis(DataViewPrototypeGetUint32);
exports.DataViewGetUint32 = DataViewGetUint32;
const DataViewSetBigInt64 = DataViewPrototypeSetBigInt64 ? uncurryThis(DataViewPrototypeSetBigInt64) : undefined;
exports.DataViewSetBigInt64 = DataViewSetBigInt64;
const DataViewSetBigUint64 = DataViewPrototypeSetBigUint64 ? uncurryThis(DataViewPrototypeSetBigUint64) : undefined;
exports.DataViewSetBigUint64 = DataViewSetBigUint64;
const DataViewSetFloat32 = uncurryThis(DataViewPrototypeSetFloat32);
exports.DataViewSetFloat32 = DataViewSetFloat32;
const DataViewSetFloat64 = uncurryThis(DataViewPrototypeSetFloat64);
exports.DataViewSetFloat64 = DataViewSetFloat64;
const DataViewSetInt8 = uncurryThis(DataViewPrototypeSetInt8);
exports.DataViewSetInt8 = DataViewSetInt8;
const DataViewSetInt16 = uncurryThis(DataViewPrototypeSetInt16);
exports.DataViewSetInt16 = DataViewSetInt16;
const DataViewSetInt32 = uncurryThis(DataViewPrototypeSetInt32);
exports.DataViewSetInt32 = DataViewSetInt32;
const DataViewSetUint8 = uncurryThis(DataViewPrototypeSetUint8);
exports.DataViewSetUint8 = DataViewSetUint8;
const DataViewSetUint16 = uncurryThis(DataViewPrototypeSetUint16);
exports.DataViewSetUint16 = DataViewSetUint16;
const DataViewSetUint32 = uncurryThis(DataViewPrototypeSetUint32);
exports.DataViewSetUint32 = DataViewSetUint32;

const DateGetDate = uncurryThis(DatePrototypeGetDate);
exports.DateGetDate = DateGetDate;
const DateGetDay = uncurryThis(DatePrototypeGetDay);
exports.DateGetDay = DateGetDay;
const DateGetFullYear = uncurryThis(DatePrototypeGetFullYear);
exports.DateGetFullYear = DateGetFullYear;
const DateGetHours = uncurryThis(DatePrototypeGetHours);
exports.DateGetHours = DateGetHours;
const DateGetMilliseconds = uncurryThis(DatePrototypeGetMilliseconds);
exports.DateGetMilliseconds = DateGetMilliseconds;
const DateGetMinutes = uncurryThis(DatePrototypeGetMinutes);
exports.DateGetMinutes = DateGetMinutes;
const DateGetMonth = uncurryThis(DatePrototypeGetMonth);
exports.DateGetMonth = DateGetMonth;
const DateGetSeconds = uncurryThis(DatePrototypeGetSeconds);
exports.DateGetSeconds = DateGetSeconds;
const DateGetTime = uncurryThis(DatePrototypeGetTime);
exports.DateGetTime = DateGetTime;
const DateGetTimezoneOffset = uncurryThis(DatePrototypeGetTimezoneOffset);
exports.DateGetTimezoneOffset = DateGetTimezoneOffset;
const DateGetUTCDate = uncurryThis(DatePrototypeGetUTCDate);
exports.DateGetUTCDate = DateGetUTCDate;
const DateGetUTCDay = uncurryThis(DatePrototypeGetUTCDay);
exports.DateGetUTCDay = DateGetUTCDay;
const DateGetUTCFullYear = uncurryThis(DatePrototypeGetUTCFullYear);
exports.DateGetUTCFullYear = DateGetUTCFullYear;
const DateGetUTCHours = uncurryThis(DatePrototypeGetUTCHours);
exports.DateGetUTCHours = DateGetUTCHours;
const DateGetUTCMilliseconds = uncurryThis(DatePrototypeGetUTCMilliseconds);
exports.DateGetUTCMilliseconds = DateGetUTCMilliseconds;
const DateGetUTCMinutes = uncurryThis(DatePrototypeGetUTCMinutes);
exports.DateGetUTCMinutes = DateGetUTCMinutes;
const DateGetUTCMonth = uncurryThis(DatePrototypeGetUTCMonth);
exports.DateGetUTCMonth = DateGetUTCMonth;
const DateGetUTCSeconds = uncurryThis(DatePrototypeGetUTCSeconds);
exports.DateGetUTCSeconds = DateGetUTCSeconds;
const DateSetDate = uncurryThis(DatePrototypeSetDate);
exports.DateSetDate = DateSetDate;
const DateSetFullYear = uncurryThis(DatePrototypeSetFullYear);
exports.DateSetFullYear = DateSetFullYear;
const DateSetHours = uncurryThis(DatePrototypeSetHours);
exports.DateSetHours = DateSetHours;
const DateSetMilliseconds = uncurryThis(DatePrototypeSetMilliseconds);
exports.DateSetMilliseconds = DateSetMilliseconds;
const DateSetMinutes = uncurryThis(DatePrototypeSetMinutes);
exports.DateSetMinutes = DateSetMinutes;
const DateSetMonth = uncurryThis(DatePrototypeSetMonth);
exports.DateSetMonth = DateSetMonth;
const DateSetSeconds = uncurryThis(DatePrototypeSetSeconds);
exports.DateSetSeconds = DateSetSeconds;
const DateSetTime = uncurryThis(DatePrototypeSetTime);
exports.DateSetTime = DateSetTime;
const DateSetUTCDate = uncurryThis(DatePrototypeSetUTCDate);
exports.DateSetUTCDate = DateSetUTCDate;
const DateSetUTCFullYear = uncurryThis(DatePrototypeSetUTCFullYear);
exports.DateSetUTCFullYear = DateSetUTCFullYear;
const DateSetUTCHours = uncurryThis(DatePrototypeSetUTCHours);
exports.DateSetUTCHours = DateSetUTCHours;
const DateSetUTCMilliseconds = uncurryThis(DatePrototypeSetUTCMilliseconds);
exports.DateSetUTCMilliseconds = DateSetUTCMilliseconds;
const DateSetUTCMinutes = uncurryThis(DatePrototypeSetUTCMinutes);
exports.DateSetUTCMinutes = DateSetUTCMinutes;
const DateSetUTCMonth = uncurryThis(DatePrototypeSetUTCMonth);
exports.DateSetUTCMonth = DateSetUTCMonth;
const DateSetUTCSeconds = uncurryThis(DatePrototypeSetUTCSeconds);
exports.DateSetUTCSeconds = DateSetUTCSeconds;
const DateToDateString = uncurryThis(DatePrototypeToDateString);
exports.DateToDateString = DateToDateString;
const DateToISOString = uncurryThis(DatePrototypeToISOString);
exports.DateToISOString = DateToISOString;
const DateToJSON = uncurryThis(DatePrototypeToJSON);
exports.DateToJSON = DateToJSON;
const DateToLocaleDateString = uncurryThis(DatePrototypeToLocaleDateString);
exports.DateToLocaleDateString = DateToLocaleDateString;
const DateToLocaleString = uncurryThis(DatePrototypeToLocaleString);
exports.DateToLocaleString = DateToLocaleString;
const DateToLocaleTimeString = uncurryThis(DatePrototypeToLocaleTimeString);
exports.DateToLocaleTimeString = DateToLocaleTimeString;
const DateToString = uncurryThis(DatePrototypeToString);
exports.DateToString = DateToString;
const DateToTimeString = uncurryThis(DatePrototypeToTimeString);
exports.DateToTimeString = DateToTimeString;
const DateToUTCString = uncurryThis(DatePrototypeToUTCString);
exports.DateToUTCString = DateToUTCString;
const DateValueOf = uncurryThis(DatePrototypeValueOf);
exports.DateValueOf = DateValueOf;
const DateSymbolToPrimitive = uncurryThis(DatePrototypeSymbolToPrimitive);
exports.DateSymbolToPrimitive = DateSymbolToPrimitive;

const ErrorToString = uncurryThis(ErrorPrototypeToString);
exports.ErrorToString = ErrorToString;

const FinalizationRegistryRegister = FinalizationRegistryPrototypeRegister ? uncurryThis(FinalizationRegistryPrototypeRegister) : undefined;
exports.FinalizationRegistryRegister = FinalizationRegistryRegister;
const FinalizationRegistryUnregister = FinalizationRegistryPrototypeUnregister ? uncurryThis(FinalizationRegistryPrototypeUnregister) : undefined;
exports.FinalizationRegistryUnregister = FinalizationRegistryUnregister;

const FunctionApply = uncurryThis(FunctionPrototypeApply);
exports.FunctionApply = FunctionApply;
const FunctionBind = uncurryThis(FunctionPrototypeBind);
exports.FunctionBind = FunctionBind;
const FunctionCall = uncurryThis(FunctionPrototypeCall);
exports.FunctionCall = FunctionCall;
const FunctionToString = uncurryThis(FunctionPrototypeToString);
exports.FunctionToString = FunctionToString;
const FunctionSymbolHasInstance = uncurryThis(FunctionPrototypeSymbolHasInstance);
exports.FunctionSymbolHasInstance = FunctionSymbolHasInstance;

const MapClear = uncurryThis(MapPrototypeClear);
exports.MapClear = MapClear;
const MapDelete = uncurryThis(MapPrototypeDelete);
exports.MapDelete = MapDelete;
const MapEntries = uncurryThis(MapPrototypeEntries);
exports.MapEntries = MapEntries;
const MapForEach = uncurryThis(MapPrototypeForEach);
exports.MapForEach = MapForEach;
const MapGet = uncurryThis(MapPrototypeGet);
exports.MapGet = MapGet;
const MapHas = uncurryThis(MapPrototypeHas);
exports.MapHas = MapHas;
const MapKeys = uncurryThis(MapPrototypeKeys);
exports.MapKeys = MapKeys;
const MapSet = uncurryThis(MapPrototypeSet);
exports.MapSet = MapSet;
const MapSize = uncurryThis(MapPrototypeSize);
exports.MapSize = MapSize;
const MapValues = uncurryThis(MapPrototypeValues);
exports.MapValues = MapValues;
const MapSymbolIterator = MapEntries;
exports.MapSymbolIterator = MapSymbolIterator;

const NumberToExponential = uncurryThis(NumberPrototypeToExponential);
exports.NumberToExponential = NumberToExponential;
const NumberToFixed = uncurryThis(NumberPrototypeToFixed);
exports.NumberToFixed = NumberToFixed;
const NumberToLocaleString = uncurryThis(NumberPrototypeToLocaleString);
exports.NumberToLocaleString = NumberToLocaleString;
const NumberToPrecision = uncurryThis(NumberPrototypeToPrecision);
exports.NumberToPrecision = NumberToPrecision;
const NumberToString = uncurryThis(NumberPrototypeToString);
exports.NumberToString = NumberToString;
const NumberValueOf = uncurryThis(NumberPrototypeValueOf);
exports.NumberValueOf = NumberValueOf;

const ObjectHasOwnProperty = uncurryThis(ObjectPrototypeHasOwnProperty);
exports.ObjectHasOwnProperty = ObjectHasOwnProperty;
const ObjectIsPrototypeOf = uncurryThis(ObjectPrototypeIsPrototypeOf);
exports.ObjectIsPrototypeOf = ObjectIsPrototypeOf;
const ObjectPropertyIsEnumerable = uncurryThis(ObjectPrototypePropertyIsEnumerable);
exports.ObjectPropertyIsEnumerable = ObjectPropertyIsEnumerable;
const ObjectToLocaleString = uncurryThis(ObjectPrototypeToLocaleString);
exports.ObjectToLocaleString = ObjectToLocaleString;
const ObjectToString = uncurryThis(ObjectPrototypeToString);
exports.ObjectToString = ObjectToString;
const ObjectValueOf = uncurryThis(ObjectPrototypeValueOf);
exports.ObjectValueOf = ObjectValueOf;

const PromiseCatch = uncurryThis(PromisePrototypeCatch);
exports.PromiseCatch = PromiseCatch;
const PromiseFinally = uncurryThis(PromisePrototypeFinally);
exports.PromiseFinally = PromiseFinally;
const PromiseThen = uncurryThis(PromisePrototypeThen);
exports.PromiseThen = PromiseThen;

const RegExpExec = uncurryThis(RegExpPrototypeExec);
exports.RegExpExec = RegExpExec;
const RegExpDotAll = RegExpPrototypeDotAll ? uncurryThis(RegExpPrototypeDotAll) : undefined;
exports.RegExpDotAll = RegExpDotAll;
const RegExpFlags = uncurryThis(RegExpPrototypeFlags);
exports.RegExpFlags = RegExpFlags;
const RegExpGlobal = uncurryThis(RegExpPrototypeGlobal);
exports.RegExpGlobal = RegExpGlobal;
const RegExpIgnoreCase = uncurryThis(RegExpPrototypeIgnoreCase);
exports.RegExpIgnoreCase = RegExpIgnoreCase;
const RegExpMultiline = uncurryThis(RegExpPrototypeMultiline);
exports.RegExpMultiline = RegExpMultiline;
const RegExpSource = uncurryThis(RegExpPrototypeSource);
exports.RegExpSource = RegExpSource;
const RegExpSticky = uncurryThis(RegExpPrototypeSticky);
exports.RegExpSticky = RegExpSticky;
const RegExpTest = uncurryThis(RegExpPrototypeTest);
exports.RegExpTest = RegExpTest;
const RegExpToString = uncurryThis(RegExpPrototypeToString);
exports.RegExpToString = RegExpToString;
const RegExpUnicode = uncurryThis(RegExpPrototypeUnicode);
exports.RegExpUnicode = RegExpUnicode;
const RegExpSymbolMatch = uncurryThis(RegExpPrototypeSymbolMatch);
exports.RegExpSymbolMatch = RegExpSymbolMatch;
const RegExpSymbolMatchAll = RegExpPrototypeSymbolMatchAll ? uncurryThis(RegExpPrototypeSymbolMatchAll) : undefined;
exports.RegExpSymbolMatchAll = RegExpSymbolMatchAll;
const RegExpSymbolReplace = uncurryThis(RegExpPrototypeSymbolReplace);
exports.RegExpSymbolReplace = RegExpSymbolReplace;
const RegExpSymbolSearch = uncurryThis(RegExpPrototypeSymbolSearch);
exports.RegExpSymbolSearch = RegExpSymbolSearch;
const RegExpSymbolSplit = uncurryThis(RegExpPrototypeSymbolSplit);
exports.RegExpSymbolSplit = RegExpSymbolSplit;

const SetAdd = uncurryThis(SetPrototypeAdd);
exports.SetAdd = SetAdd;
const SetClear = uncurryThis(SetPrototypeClear);
exports.SetClear = SetClear;
const SetDelete = uncurryThis(SetPrototypeDelete);
exports.SetDelete = SetDelete;
const SetEntries = uncurryThis(SetPrototypeEntries);
exports.SetEntries = SetEntries;
const SetForEach = uncurryThis(SetPrototypeForEach);
exports.SetForEach = SetForEach;
const SetHas = uncurryThis(SetPrototypeHas);
exports.SetHas = SetHas;
const SetKeys = uncurryThis(SetPrototypeKeys);
exports.SetKeys = SetKeys;
const SetSize = uncurryThis(SetPrototypeSize);
exports.SetSize = SetSize;
const SetValues = uncurryThis(SetPrototypeValues);
exports.SetValues = SetValues;
const SetSymbolIterator = SetValues;
exports.SetSymbolIterator = SetSymbolIterator;

const SharedArrayBufferByteLength = SharedArrayBufferPrototypeByteLength ? uncurryThis(SharedArrayBufferPrototypeByteLength) : undefined;
exports.SharedArrayBufferByteLength = SharedArrayBufferByteLength;
const SharedArrayBufferSlice = SharedArrayBufferPrototypeSlice ? uncurryThis(SharedArrayBufferPrototypeSlice) : undefined;
exports.SharedArrayBufferSlice = SharedArrayBufferSlice;

const StringAt = StringPrototypeAt ? uncurryThis(StringPrototypeAt) : undefined;
exports.StringAt = StringAt;
const StringCharAt = uncurryThis(StringPrototypeCharAt);
exports.StringCharAt = StringCharAt;
const StringCharCodeAt = uncurryThis(StringPrototypeCharCodeAt);
exports.StringCharCodeAt = StringCharCodeAt;
const StringCodePointAt = uncurryThis(StringPrototypeCodePointAt);
exports.StringCodePointAt = StringCodePointAt;
const StringConcat = uncurryThis(StringPrototypeConcat);
exports.StringConcat = StringConcat;
const StringEndsWith = uncurryThis(StringPrototypeEndsWith);
exports.StringEndsWith = StringEndsWith;
const StringIncludes = uncurryThis(StringPrototypeIncludes);
exports.StringIncludes = StringIncludes;
const StringIndexOf = uncurryThis(StringPrototypeIndexOf);
exports.StringIndexOf = StringIndexOf;
const StringLastIndexOf = uncurryThis(StringPrototypeLastIndexOf);
exports.StringLastIndexOf = StringLastIndexOf;
const StringLocaleCompare = uncurryThis(StringPrototypeLocaleCompare);
exports.StringLocaleCompare = StringLocaleCompare;
const StringMatch = uncurryThis(StringPrototypeMatch);
exports.StringMatch = StringMatch;
const StringMatchAll = StringPrototypeMatchAll ? uncurryThis(StringPrototypeMatchAll) : undefined;
exports.StringMatchAll = StringMatchAll;
const StringNormalize = uncurryThis(StringPrototypeNormalize);
exports.StringNormalize = StringNormalize;
const StringPadEnd = StringPrototypePadEnd ? uncurryThis(StringPrototypePadEnd) : undefined;
exports.StringPadEnd = StringPadEnd;
const StringPadStart = StringPrototypePadStart ? uncurryThis(StringPrototypePadStart) : undefined;
exports.StringPadStart = StringPadStart;
const StringRepeat = uncurryThis(StringPrototypeRepeat);
exports.StringRepeat = StringRepeat;
const StringReplace = uncurryThis(StringPrototypeReplace);
exports.StringReplace = StringReplace;
const StringReplaceAll = StringPrototypeReplaceAll ? uncurryThis(StringPrototypeReplaceAll) : undefined;
exports.StringReplaceAll = StringReplaceAll;
const StringSearch = uncurryThis(StringPrototypeSearch);
exports.StringSearch = StringSearch;
const StringSlice = uncurryThis(StringPrototypeSlice);
exports.StringSlice = StringSlice;
const StringSplit = uncurryThis(StringPrototypeSplit);
exports.StringSplit = StringSplit;
const StringStartsWith = uncurryThis(StringPrototypeStartsWith);
exports.StringStartsWith = StringStartsWith;
const StringSubstring = uncurryThis(StringPrototypeSubstring);
exports.StringSubstring = StringSubstring;
const StringToLocaleLowerCase = uncurryThis(StringPrototypeToLocaleLowerCase);
exports.StringToLocaleLowerCase = StringToLocaleLowerCase;
const StringToLocaleUpperCase = uncurryThis(StringPrototypeToLocaleUpperCase);
exports.StringToLocaleUpperCase = StringToLocaleUpperCase;
const StringToLowerCase = uncurryThis(StringPrototypeToLowerCase);
exports.StringToLowerCase = StringToLowerCase;
const StringToString = uncurryThis(StringPrototypeToString);
exports.StringToString = StringToString;
const StringToUpperCase = uncurryThis(StringPrototypeToUpperCase);
exports.StringToUpperCase = StringToUpperCase;
const StringTrim = uncurryThis(StringPrototypeTrim);
exports.StringTrim = StringTrim;
const StringTrimEnd = StringPrototypeTrimEnd ? uncurryThis(StringPrototypeTrimEnd) : undefined;
exports.StringTrimEnd = StringTrimEnd;
const StringTrimStart = StringPrototypeTrimStart ? uncurryThis(StringPrototypeTrimStart) : undefined;
exports.StringTrimStart = StringTrimStart;
const StringValueOf = uncurryThis(StringPrototypeValueOf);
exports.StringValueOf = StringValueOf;
const StringSymbolIterator = uncurryThis(StringPrototypeSymbolIterator);
exports.StringSymbolIterator = StringSymbolIterator;

const SymbolDescription = SymbolPrototypeDescription ? uncurryThis(SymbolPrototypeDescription) : undefined;
exports.SymbolDescription = SymbolDescription;
const SymbolToString = uncurryThis(SymbolPrototypeToString);
exports.SymbolToString = SymbolToString;
const SymbolValueOf = uncurryThis(SymbolPrototypeValueOf);
exports.SymbolValueOf = SymbolValueOf;
const SymbolSymbolToPrimitive = uncurryThis(SymbolPrototypeSymbolToPrimitive);
exports.SymbolSymbolToPrimitive = SymbolSymbolToPrimitive;

const WeakMapDelete = uncurryThis(WeakMapPrototypeDelete);
exports.WeakMapDelete = WeakMapDelete;
const WeakMapGet = uncurryThis(WeakMapPrototypeGet);
exports.WeakMapGet = WeakMapGet;
const WeakMapHas = uncurryThis(WeakMapPrototypeHas);
exports.WeakMapHas = WeakMapHas;
const WeakMapSet = uncurryThis(WeakMapPrototypeSet);
exports.WeakMapSet = WeakMapSet;

const WeakRefDeref = WeakRefPrototypeDeref ? uncurryThis(WeakRefPrototypeDeref) : undefined;
exports.WeakRefDeref = WeakRefDeref;

const WeakSetAdd = uncurryThis(WeakSetPrototypeAdd);
exports.WeakSetAdd = WeakSetAdd;
const WeakSetDelete = uncurryThis(WeakSetPrototypeDelete);
exports.WeakSetDelete = WeakSetDelete;
const WeakSetHas = uncurryThis(WeakSetPrototypeHas);
exports.WeakSetHas = WeakSetHas;

const PromiseAll = FunctionBind($PromiseAll, Promise);
exports.PromiseAll = PromiseAll;
const PromiseAllSettled = $PromiseAllSettled ? FunctionBind($PromiseAllSettled, Promise) : undefined;
exports.PromiseAllSettled = PromiseAllSettled;
const PromiseAny = $PromiseAny ? FunctionBind($PromiseAny, Promise) : undefined;
exports.PromiseAny = PromiseAny;
const PromiseRace = FunctionBind($PromiseRace, Promise);
exports.PromiseRace = PromiseRace;
const PromiseReject = FunctionBind($PromiseReject, Promise);
exports.PromiseReject = PromiseReject;
const PromiseResolve = FunctionBind($PromiseResolve, Promise);
exports.PromiseResolve = PromiseResolve;

const TypedArray = ReflectGetPrototypeOf(Uint8Array);
exports.TypedArray = TypedArray;

const $TypedArrayFrom = TypedArray.from;
exports.$TypedArrayFrom = $TypedArrayFrom;
const $TypedArrayOf = TypedArray.of;
exports.$TypedArrayOf = $TypedArrayOf;
const TypedArrayPrototype = TypedArray.prototype;
exports.TypedArrayPrototype = TypedArrayPrototype;
const TypedArrayPrototypeAt = TypedArrayPrototype.at;
exports.TypedArrayPrototypeAt = TypedArrayPrototypeAt;
const TypedArrayPrototypeCopyWithin = TypedArrayPrototype.copyWithin;
exports.TypedArrayPrototypeCopyWithin = TypedArrayPrototypeCopyWithin;
const TypedArrayPrototypeEntries = TypedArrayPrototype.entries;
exports.TypedArrayPrototypeEntries = TypedArrayPrototypeEntries;
const TypedArrayPrototypeEvery = TypedArrayPrototype.every;
exports.TypedArrayPrototypeEvery = TypedArrayPrototypeEvery;
const TypedArrayPrototypeFill = TypedArrayPrototype.fill;
exports.TypedArrayPrototypeFill = TypedArrayPrototypeFill;
const TypedArrayPrototypeFilter = TypedArrayPrototype.filter;
exports.TypedArrayPrototypeFilter = TypedArrayPrototypeFilter;
const TypedArrayPrototypeFind = TypedArrayPrototype.find;
exports.TypedArrayPrototypeFind = TypedArrayPrototypeFind;
const TypedArrayPrototypeFindIndex = TypedArrayPrototype.findIndex;
exports.TypedArrayPrototypeFindIndex = TypedArrayPrototypeFindIndex;
const TypedArrayPrototypeForEach = TypedArrayPrototype.forEach;
exports.TypedArrayPrototypeForEach = TypedArrayPrototypeForEach;
const TypedArrayPrototypeIncludes = TypedArrayPrototype.includes;
exports.TypedArrayPrototypeIncludes = TypedArrayPrototypeIncludes;
const TypedArrayPrototypeIndexOf = TypedArrayPrototype.indexOf;
exports.TypedArrayPrototypeIndexOf = TypedArrayPrototypeIndexOf;
const TypedArrayPrototypeJoin = TypedArrayPrototype.join;
exports.TypedArrayPrototypeJoin = TypedArrayPrototypeJoin;
const TypedArrayPrototypeKeys = TypedArrayPrototype.keys;
exports.TypedArrayPrototypeKeys = TypedArrayPrototypeKeys;
const TypedArrayPrototypeLastIndexOf = TypedArrayPrototype.lastIndexOf;
exports.TypedArrayPrototypeLastIndexOf = TypedArrayPrototypeLastIndexOf;
const TypedArrayPrototypeMap = TypedArrayPrototype.map;
exports.TypedArrayPrototypeMap = TypedArrayPrototypeMap;
const TypedArrayPrototypeReduce = TypedArrayPrototype.reduce;
exports.TypedArrayPrototypeReduce = TypedArrayPrototypeReduce;
const TypedArrayPrototypeReduceRight = TypedArrayPrototype.reduceRight;
exports.TypedArrayPrototypeReduceRight = TypedArrayPrototypeReduceRight;
const TypedArrayPrototypeReverse = TypedArrayPrototype.reverse;
exports.TypedArrayPrototypeReverse = TypedArrayPrototypeReverse;
const TypedArrayPrototypeSet = TypedArrayPrototype.set;
exports.TypedArrayPrototypeSet = TypedArrayPrototypeSet;
const TypedArrayPrototypeSlice = TypedArrayPrototype.slice;
exports.TypedArrayPrototypeSlice = TypedArrayPrototypeSlice;
const TypedArrayPrototypeSome = TypedArrayPrototype.some;
exports.TypedArrayPrototypeSome = TypedArrayPrototypeSome;
const TypedArrayPrototypeSort = TypedArrayPrototype.sort;
exports.TypedArrayPrototypeSort = TypedArrayPrototypeSort;
const TypedArrayPrototypeSubarray = TypedArrayPrototype.subarray;
exports.TypedArrayPrototypeSubarray = TypedArrayPrototypeSubarray;
const TypedArrayPrototypeToLocaleString = TypedArrayPrototype.toLocaleString;
exports.TypedArrayPrototypeToLocaleString = TypedArrayPrototypeToLocaleString;
const TypedArrayPrototypeToString = ArrayPrototypeToString;
exports.TypedArrayPrototypeToString = TypedArrayPrototypeToString;
const TypedArrayPrototypeValues = TypedArrayPrototype.values;
exports.TypedArrayPrototypeValues = TypedArrayPrototypeValues;
const TypedArrayPrototypeSymbolIterator = TypedArrayPrototypeValues;
exports.TypedArrayPrototypeSymbolIterator = TypedArrayPrototypeSymbolIterator;

const TypedArrayPrototypeBuffer = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, 'buffer').get;
exports.TypedArrayPrototypeBuffer = TypedArrayPrototypeBuffer;
const TypedArrayPrototypeByteLength = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, 'byteLength').get;
exports.TypedArrayPrototypeByteLength = TypedArrayPrototypeByteLength;
const TypedArrayPrototypeByteOffset = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, 'byteOffset').get;
exports.TypedArrayPrototypeByteOffset = TypedArrayPrototypeByteOffset;
const TypedArrayPrototypeLength = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, 'length').get;
exports.TypedArrayPrototypeLength = TypedArrayPrototypeLength;
const TypedArrayPrototypeSymbolToStringTag = ReflectGetOwnPropertyDescriptor(TypedArrayPrototype, SymbolToStringTag).get;
exports.TypedArrayPrototypeSymbolToStringTag = TypedArrayPrototypeSymbolToStringTag;

const TypedArrayFrom = uncurryThis($TypedArrayFrom);
exports.TypedArrayFrom = TypedArrayFrom;
const TypedArrayOf = uncurryThis($TypedArrayOf);
exports.TypedArrayOf = TypedArrayOf;
const TypedArrayAt = TypedArrayPrototypeAt ? uncurryThis(TypedArrayPrototypeAt) : undefined;
exports.TypedArrayAt = TypedArrayAt;
const TypedArrayBuffer = uncurryThis(TypedArrayPrototypeBuffer);
exports.TypedArrayBuffer = TypedArrayBuffer;
const TypedArrayByteLength = uncurryThis(TypedArrayPrototypeByteLength);
exports.TypedArrayByteLength = TypedArrayByteLength;
const TypedArrayByteOffset = uncurryThis(TypedArrayPrototypeByteOffset);
exports.TypedArrayByteOffset = TypedArrayByteOffset;
const TypedArrayCopyWithin = uncurryThis(TypedArrayPrototypeCopyWithin);
exports.TypedArrayCopyWithin = TypedArrayCopyWithin;
const TypedArrayEntries = uncurryThis(TypedArrayPrototypeEntries);
exports.TypedArrayEntries = TypedArrayEntries;
const TypedArrayEvery = uncurryThis(TypedArrayPrototypeEvery);
exports.TypedArrayEvery = TypedArrayEvery;
const TypedArrayFill = uncurryThis(TypedArrayPrototypeFill);
exports.TypedArrayFill = TypedArrayFill;
const TypedArrayFind = uncurryThis(TypedArrayPrototypeFind);
exports.TypedArrayFind = TypedArrayFind;
const TypedArrayFindIndex = uncurryThis(TypedArrayPrototypeFindIndex);
exports.TypedArrayFindIndex = TypedArrayFindIndex;
const TypedArrayForEach = uncurryThis(TypedArrayPrototypeForEach);
exports.TypedArrayForEach = TypedArrayForEach;
const TypedArrayIncludes = TypedArrayPrototypeIncludes ? uncurryThis(TypedArrayPrototypeIncludes) : undefined;
exports.TypedArrayIncludes = TypedArrayIncludes;
const TypedArrayIndexOf = uncurryThis(TypedArrayPrototypeIndexOf);
exports.TypedArrayIndexOf = TypedArrayIndexOf;
const TypedArrayJoin = uncurryThis(TypedArrayPrototypeJoin);
exports.TypedArrayJoin = TypedArrayJoin;
const TypedArrayLength = uncurryThis(TypedArrayPrototypeLength);
exports.TypedArrayLength = TypedArrayLength;
const TypedArrayMap = uncurryThis(TypedArrayPrototypeMap);
exports.TypedArrayMap = TypedArrayMap;
const TypedArrayReduce = uncurryThis(TypedArrayPrototypeReduce);
exports.TypedArrayReduce = TypedArrayReduce;
const TypedArrayReduceRight = uncurryThis(TypedArrayPrototypeReduceRight);
exports.TypedArrayReduceRight = TypedArrayReduceRight;
const TypedArrayReverse = uncurryThis(TypedArrayPrototypeReverse);
exports.TypedArrayReverse = TypedArrayReverse;
const TypedArraySet = uncurryThis(TypedArrayPrototypeSet);
exports.TypedArraySet = TypedArraySet;
const TypedArraySlice = uncurryThis(TypedArrayPrototypeSlice);
exports.TypedArraySlice = TypedArraySlice;
const TypedArraySome = uncurryThis(TypedArrayPrototypeSome);
exports.TypedArraySome = TypedArraySome;
const TypedArraySort = uncurryThis(TypedArrayPrototypeSort);
exports.TypedArraySort = TypedArraySort;
const TypedArraySubarray = uncurryThis(TypedArrayPrototypeSubarray);
exports.TypedArraySubarray = TypedArraySubarray;
const TypedArrayToLocaleString = uncurryThis(TypedArrayPrototypeToLocaleString);
exports.TypedArrayToLocaleString = TypedArrayToLocaleString;
const TypedArrayToString = ArrayToString;
exports.TypedArrayToString = TypedArrayToString;
const TypedArrayValues = uncurryThis(TypedArrayPrototypeValues);
exports.TypedArrayValues = TypedArrayValues;
const TypedArraySymbolIterator = TypedArrayValues;
exports.TypedArraySymbolIterator = TypedArraySymbolIterator;
const TypedArraySymbolToStringTag = uncurryThis(TypedArrayPrototypeSymbolToStringTag);
exports.TypedArraySymbolToStringTag = TypedArraySymbolToStringTag;

const BigInt64ArrayFrom = BigInt64Array ? FunctionBind($TypedArrayFrom, BigInt64Array) : undefined;
exports.BigInt64ArrayFrom = BigInt64ArrayFrom;
const BigInt64ArrayOf = BigInt64Array ? FunctionBind($TypedArrayOf, BigInt64Array) : undefined;
exports.BigInt64ArrayOf = BigInt64ArrayOf;
const BigInt64PrototypeSymbolToStringTag = BigInt64Array ? TypedArraySymbolToStringTag(new BigInt64Array) : undefined;
exports.BigInt64PrototypeSymbolToStringTag = BigInt64PrototypeSymbolToStringTag;

const BigUint64ArrayFrom = BigUint64Array ? FunctionBind($TypedArrayFrom, BigUint64Array) : undefined;
exports.BigUint64ArrayFrom = BigUint64ArrayFrom;
const BigUint64ArrayOf = BigUint64Array ? FunctionBind($TypedArrayOf, BigUint64Array) : undefined;
exports.BigUint64ArrayOf = BigUint64ArrayOf;
const BigUint64ArrayPrototypeSymbolToStringTag = BigUint64ArrayPrototype ? TypedArraySymbolToStringTag(new BigUint64Array) : undefined;
exports.BigUint64ArrayPrototypeSymbolToStringTag = BigUint64ArrayPrototypeSymbolToStringTag;

const Float32ArrayFrom = FunctionBind($TypedArrayFrom, Float32Array);
exports.Float32ArrayFrom = Float32ArrayFrom;
const Float32ArrayOf = FunctionBind($TypedArrayOf, Float32Array);
exports.Float32ArrayOf = Float32ArrayOf;
const Float32ArrayPrototypeSymbolToStringTag = TypedArraySymbolToStringTag(new Float32Array);
exports.Float32ArrayPrototypeSymbolToStringTag = Float32ArrayPrototypeSymbolToStringTag;

const Float64ArrayFrom = FunctionBind($TypedArrayFrom, Float64Array);
exports.Float64ArrayFrom = Float64ArrayFrom;
const Float64ArrayOf = FunctionBind($TypedArrayOf, Float64Array);
exports.Float64ArrayOf = Float64ArrayOf;
const Float64ArrayPrototypeSymbolToStringTag = TypedArraySymbolToStringTag(new Float64Array);
exports.Float64ArrayPrototypeSymbolToStringTag = Float64ArrayPrototypeSymbolToStringTag;

const Int8ArrayFrom = FunctionBind($TypedArrayFrom, Int8Array);
exports.Int8ArrayFrom = Int8ArrayFrom;
const Int8ArrayOf = FunctionBind($TypedArrayOf, Int8Array);
exports.Int8ArrayOf = Int8ArrayOf;
const Int8ArrayPrototypeSymbolToStringTag = TypedArraySymbolToStringTag(new Int8Array);
exports.Int8ArrayPrototypeSymbolToStringTag = Int8ArrayPrototypeSymbolToStringTag;

const Int16ArrayFrom = FunctionBind($TypedArrayFrom, Int16Array);
exports.Int16ArrayFrom = Int16ArrayFrom;
const Int16ArrayOf = FunctionBind($TypedArrayOf, Int16Array);
exports.Int16ArrayOf = Int16ArrayOf;
const Int16ArrayPrototypeSymbolToStringTag = TypedArraySymbolToStringTag(new Int16Array);
exports.Int16ArrayPrototypeSymbolToStringTag = Int16ArrayPrototypeSymbolToStringTag;

const Int32ArrayFrom = FunctionBind($TypedArrayFrom, Int32Array);
exports.Int32ArrayFrom = Int32ArrayFrom;
const Int32ArrayOf = FunctionBind($TypedArrayOf, Int32Array);
exports.Int32ArrayOf = Int32ArrayOf;
const Int32ArrayPrototypeSymbolToStringTag = TypedArraySymbolToStringTag(new Int32Array);
exports.Int32ArrayPrototypeSymbolToStringTag = Int32ArrayPrototypeSymbolToStringTag;

const Uint8ArrayFrom = FunctionBind($TypedArrayFrom, Uint8Array);
exports.Uint8ArrayFrom = Uint8ArrayFrom;
const Uint8ArrayOf = FunctionBind($TypedArrayOf, Uint8Array);
exports.Uint8ArrayOf = Uint8ArrayOf;
const Uint8ArrayPrototypeSymbolToStringTag = TypedArraySymbolToStringTag(new Uint8Array);
exports.Uint8ArrayPrototypeSymbolToStringTag = Uint8ArrayPrototypeSymbolToStringTag;

const Uint8ClampedArrayFrom = FunctionBind($TypedArrayFrom, Uint8ClampedArray);
exports.Uint8ClampedArrayFrom = Uint8ClampedArrayFrom;
const Uint8ClampedArrayOf = FunctionBind($TypedArrayOf, Uint8ClampedArray);
exports.Uint8ClampedArrayOf = Uint8ClampedArrayOf;
const Uint8ClampedArrayPrototypeSymbolToStringTag = TypedArraySymbolToStringTag(new Uint8ClampedArray);
exports.Uint8ClampedArrayPrototypeSymbolToStringTag = Uint8ClampedArrayPrototypeSymbolToStringTag;

const Uint16ArrayFrom = FunctionBind($TypedArrayFrom, Uint16Array);
exports.Uint16ArrayFrom = Uint16ArrayFrom;
const Uint16ArrayOf = FunctionBind($TypedArrayOf, Uint16Array);
exports.Uint16ArrayOf = Uint16ArrayOf;
const Uint16ArrayPrototypeSymbolToStringTag = TypedArraySymbolToStringTag(new Uint16Array);
exports.Uint16ArrayPrototypeSymbolToStringTag = Uint16ArrayPrototypeSymbolToStringTag;

const Uint32ArrayFrom = FunctionBind($TypedArrayFrom, Uint32Array);
exports.Uint32ArrayFrom = Uint32ArrayFrom;
const Uint32ArrayOf = FunctionBind($TypedArrayOf, Uint32Array);
exports.Uint32ArrayOf = Uint32ArrayOf;
const Uint32ArrayPrototypeSymbolToStringTag = TypedArraySymbolToStringTag(new Uint32Array);
exports.Uint32ArrayPrototypeSymbolToStringTag = Uint32ArrayPrototypeSymbolToStringTag;

const getEvaluatedConstructor = expression => {
  try {
    return new Function(`'use strict'; return (${expression}).constructor;`)();
  } catch (e) {}
}

const GeneratorFunction = getEvaluatedConstructor('function* () {}');
exports.GeneratorFunction = GeneratorFunction;
const AsyncFunction = getEvaluatedConstructor('async function () {}');
exports.AsyncFunction = AsyncFunction;
const AsyncGeneratorFunction = getEvaluatedConstructor('async function* () {}');
exports.AsyncGeneratorFunction = AsyncGeneratorFunction;

const GeneratorFunctionPrototype = GeneratorFunction.prototype;
exports.GeneratorFunctionPrototype = GeneratorFunctionPrototype;
const GeneratorFunctionPrototypeSymbolToStringTag = GeneratorFunctionPrototype[SymbolToStringTag];
exports.GeneratorFunctionPrototypeSymbolToStringTag = GeneratorFunctionPrototypeSymbolToStringTag;

const GeneratorPrototype = GeneratorFunctionPrototype.prototype;
exports.GeneratorPrototype = GeneratorPrototype;
const GeneratorPrototypeNext = GeneratorPrototype.next;
exports.GeneratorPrototypeNext = GeneratorPrototypeNext;
const GeneratorPrototypeReturn = GeneratorPrototype.return;
exports.GeneratorPrototypeReturn = GeneratorPrototypeReturn;
const GeneratorPrototypeThrow = GeneratorPrototype.throw;
exports.GeneratorPrototypeThrow = GeneratorPrototypeThrow;
const GeneratorPrototypeSymbolToStringTag = GeneratorPrototype[SymbolToStringTag];
exports.GeneratorPrototypeSymbolToStringTag = GeneratorPrototypeSymbolToStringTag;

const AsyncFunctionPrototype = AsyncFunction ? AsyncFunction.prototype : undefined;
exports.AsyncFunctionPrototype = AsyncFunctionPrototype;
const AsyncFunctionPrototypeSymbolToStringTag = AsyncFunctionPrototype ? AsyncFunctionPrototype[SymbolToStringTag] : undefined;
exports.AsyncFunctionPrototypeSymbolToStringTag = AsyncFunctionPrototypeSymbolToStringTag;

const AsyncGeneratorFunctionPrototype = AsyncGeneratorFunction ? AsyncGeneratorFunction.prototype : undefined;
exports.AsyncGeneratorFunctionPrototype = AsyncGeneratorFunctionPrototype;
const AsyncGeneratorFunctionPrototypeSymbolToStringTag = AsyncGeneratorFunctionPrototype ? AsyncGeneratorFunctionPrototype[SymbolToStringTag] : undefined;
exports.AsyncGeneratorFunctionPrototypeSymbolToStringTag = AsyncGeneratorFunctionPrototypeSymbolToStringTag;

const AsyncGeneratorPrototype = AsyncGeneratorFunctionPrototype ? AsyncGeneratorFunctionPrototype.prototype : undefined;
exports.AsyncGeneratorPrototype = AsyncGeneratorPrototype;
const AsyncGeneratorPrototypeNext = AsyncGeneratorPrototype ? AsyncGeneratorPrototype.next : undefined;
exports.AsyncGeneratorPrototypeNext = AsyncGeneratorPrototypeNext;
const AsyncGeneratorPrototypeReturn = AsyncGeneratorPrototype ? AsyncGeneratorPrototype.return : undefined;
exports.AsyncGeneratorPrototypeReturn = AsyncGeneratorPrototypeReturn;
const AsyncGeneratorPrototypeThrow = AsyncGeneratorPrototype ? AsyncGeneratorPrototype.throw : undefined;
exports.AsyncGeneratorPrototypeThrow = AsyncGeneratorPrototypeThrow;
const AsyncGeneratorPrototypeSymbolToStringTag = AsyncGeneratorPrototype ? AsyncGeneratorPrototype[SymbolToStringTag] : undefined;
exports.AsyncGeneratorPrototypeSymbolToStringTag = AsyncGeneratorPrototypeSymbolToStringTag;

const ArrayIteratorPrototype = ReflectGetPrototypeOf(ArraySymbolIterator([]));
exports.ArrayIteratorPrototype = ArrayIteratorPrototype;
const ArrayIteratorPrototypeNext = ArrayIteratorPrototype.next;
exports.ArrayIteratorPrototypeNext = ArrayIteratorPrototypeNext;
const ArrayIteratorPrototypeSymbolToStringTag = ArrayIteratorPrototype[SymbolToStringTag];
exports.ArrayIteratorPrototypeSymbolToStringTag = ArrayIteratorPrototypeSymbolToStringTag;

const AsyncIteratorPrototype = AsyncGeneratorPrototype ? ReflectGetPrototypeOf(AsyncGeneratorPrototype) : undefined;
exports.AsyncIteratorPrototype = AsyncIteratorPrototype;
const AsyncIteratorPrototypeSymbolAsyncIterator = AsyncIteratorPrototype ? AsyncIteratorPrototype[SymbolAsyncIterator] : undefined;
exports.AsyncIteratorPrototypeSymbolAsyncIterator = AsyncIteratorPrototypeSymbolAsyncIterator;

const IteratorPrototype = ReflectGetPrototypeOf(ArrayIteratorPrototype);
exports.IteratorPrototype = IteratorPrototype;
const IteratorPrototypeSymbolIterator = IteratorPrototype[SymbolIterator];
exports.IteratorPrototypeSymbolIterator = IteratorPrototypeSymbolIterator;

const MapIteratorPrototype = ReflectGetPrototypeOf(MapSymbolIterator(new Map));
exports.MapIteratorPrototype = MapIteratorPrototype;
const MapIteratorPrototypeNext = MapIteratorPrototype.next;
exports.MapIteratorPrototypeNext = MapIteratorPrototypeNext;
const MapIteratorPrototypeSymbolToStringTag = MapIteratorPrototype[SymbolToStringTag];
exports.MapIteratorPrototypeSymbolToStringTag = MapIteratorPrototypeSymbolToStringTag;

const RegExpStringIteratorPrototype = RegExpSymbolMatchAll ? ReflectGetPrototypeOf(RegExpSymbolMatchAll(/(?:)/)) : undefined;
exports.RegExpStringIteratorPrototype = RegExpStringIteratorPrototype;
const RegExpStringIteratorPrototypeNext = RegExpStringIteratorPrototype ? RegExpStringIteratorPrototype.next : undefined;
exports.RegExpStringIteratorPrototypeNext = RegExpStringIteratorPrototypeNext;
const RegExpStringIteratorPrototypeSymbolToStringTag = RegExpStringIteratorPrototype ? RegExpStringIteratorPrototype[SymbolToStringTag] : undefined;
exports.RegExpStringIteratorPrototypeSymbolToStringTag = RegExpStringIteratorPrototypeSymbolToStringTag;

const SetIteratorPrototype = ReflectGetPrototypeOf(SetSymbolIterator(new Set));
exports.SetIteratorPrototype = SetIteratorPrototype;
const SetIteratorPrototypeNext = SetIteratorPrototype.next;
exports.SetIteratorPrototypeNext = SetIteratorPrototypeNext;
const SetIteratorPrototypeSymbolToStringTag = SetIteratorPrototype[SymbolToStringTag];
exports.SetIteratorPrototypeSymbolToStringTag = SetIteratorPrototypeSymbolToStringTag;

const StringIteratorPrototype = ReflectGetPrototypeOf(StringSymbolIterator(''));
exports.StringIteratorPrototype = StringIteratorPrototype;
const StringIteratorPrototypeNext = StringIteratorPrototype.next;
exports.StringIteratorPrototypeNext = StringIteratorPrototypeNext;
const StringIteratorPrototypeSymbolToStringTag = StringIteratorPrototype[SymbolToStringTag];
exports.StringIteratorPrototypeSymbolToStringTag = StringIteratorPrototypeSymbolToStringTag;

const ArrayIteratorNext = uncurryThis(ArrayIteratorPrototypeNext);
exports.ArrayIteratorNext = ArrayIteratorNext;

const AsyncGeneratorNext = AsyncGeneratorPrototypeNext ? uncurryThis(AsyncGeneratorPrototypeNext) : undefined;
exports.AsyncGeneratorNext = AsyncGeneratorNext;
const AsyncGeneratorReturn = AsyncGeneratorPrototypeReturn ? uncurryThis(AsyncGeneratorPrototypeReturn) : undefined;
exports.AsyncGeneratorReturn = AsyncGeneratorReturn;
const AsyncGeneratorThrow = AsyncGeneratorPrototypeThrow ? uncurryThis(AsyncGeneratorPrototypeThrow) : undefined;
exports.AsyncGeneratorThrow = AsyncGeneratorThrow;

const AsyncIteratorSymbolAsyncIterator = AsyncIteratorPrototypeSymbolAsyncIterator ? uncurryThis(AsyncIteratorPrototypeSymbolAsyncIterator) : undefined;
exports.AsyncIteratorSymbolAsyncIterator = AsyncIteratorSymbolAsyncIterator;

const GeneratorNext = uncurryThis(GeneratorPrototypeNext);
exports.GeneratorNext = GeneratorNext;
const GeneratorReturn = uncurryThis(GeneratorPrototypeReturn);
exports.GeneratorReturn = GeneratorReturn;
const GeneratorThrow = uncurryThis(GeneratorPrototypeThrow);
exports.GeneratorThrow = GeneratorThrow;

const IteratorSymbolIterator = uncurryThis(IteratorPrototypeSymbolIterator);
exports.IteratorSymbolIterator = IteratorSymbolIterator;

const MapIteratorNext = uncurryThis(MapIteratorPrototypeNext);
exports.MapIteratorNext = MapIteratorNext;

const RegExpStringIteratorNext = RegExpStringIteratorPrototypeNext ? uncurryThis(RegExpStringIteratorPrototypeNext) : undefined;
exports.RegExpStringIteratorNext = RegExpStringIteratorNext;

const SetIteratorNext = uncurryThis(SetIteratorPrototypeNext);
exports.SetIteratorNext = SetIteratorNext;

const StringIteratorNext = uncurryThis(StringIteratorPrototypeNext);
exports.StringIteratorNext = StringIteratorNext;

const FunctionApplyBind = FunctionBind(FunctionPrototypeBind, FunctionPrototypeApply);
exports.FunctionApplyBind = FunctionApplyBind;

const ArrayOfApply = FunctionApplyBind(ArrayOf, Array);
exports.ArrayOfApply = ArrayOfApply;
const ArrayPushApply = FunctionApplyBind(ArrayPrototypePush);
exports.ArrayPushApply = ArrayPushApply;
const ArrayUnshiftApply = FunctionApplyBind(ArrayPrototypeUnshift);
exports.ArrayUnshiftApply = ArrayUnshiftApply;

const BigInt64ArrayOfApply = BigInt64Array ? FunctionApplyBind($TypedArrayOf, BigInt64Array) : undefined;
exports.BigInt64ArrayOfApply = BigInt64ArrayOfApply;

const BigUint64ArrayOfApply = BigUint64Array ? FunctionApplyBind($TypedArrayOf, BigUint64Array) : undefined;
exports.BigUint64ArrayOfApply = BigUint64ArrayOfApply;

const Float32ArrayOfApply = FunctionApplyBind($TypedArrayOf, Float32Array);
exports.Float32ArrayOfApply = Float32ArrayOfApply;

const Float64ArrayOfApply = FunctionApplyBind($TypedArrayOf, Float64Array);
exports.Float64ArrayOfApply = Float64ArrayOfApply;

const Int8ArrayOfApply = FunctionApplyBind($TypedArrayOf, Int8Array);
exports.Int8ArrayOfApply = Int8ArrayOfApply;

const Int16ArrayOfApply = FunctionApplyBind($TypedArrayOf, Int16Array);
exports.Int16ArrayOfApply = Int16ArrayOfApply;

const Int32ArrayOfApply = FunctionApplyBind($TypedArrayOf, Int32Array);
exports.Int32ArrayOfApply = Int32ArrayOfApply;

const MathHypotApply = FunctionApplyBind(MathHypot, Math);
exports.MathHypotApply = MathHypotApply;
const MathMaxApply = FunctionApplyBind(MathMax, Math);
exports.MathMaxApply = MathMaxApply;
const MathMinApply = FunctionApplyBind(MathMin, Math);
exports.MathMinApply = MathMinApply;

const StringConcatApply = FunctionApplyBind(StringPrototypeConcat);
exports.StringConcatApply = StringConcatApply;

const TypedArrayOfApply = FunctionApplyBind($TypedArrayOf);
exports.TypedArrayOfApply = TypedArrayOfApply;

const Uint8ArrayOfApply = FunctionApplyBind($TypedArrayOf, Uint8Array);
exports.Uint8ArrayOfApply = Uint8ArrayOfApply;

const Uint8ClampedArrayOfApply = FunctionApplyBind($TypedArrayOf, Uint8ClampedArray);
exports.Uint8ClampedArrayOfApply = Uint8ClampedArrayOfApply;

const Uint16ArrayOfApply = FunctionApplyBind($TypedArrayOf, Uint16Array);
exports.Uint16ArrayOfApply = Uint16ArrayOfApply;

const Uint32ArrayOfApply = FunctionApplyBind($TypedArrayOf, Uint32Array);
exports.Uint32ArrayOfApply = Uint32ArrayOfApply;
